// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bank.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bank_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bank_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bank_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bank_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[28]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bank_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_bank_2eproto_metadata_getter(int index);
namespace bank {
class AccountMsg;
struct AccountMsgDefaultTypeInternal;
extern AccountMsgDefaultTypeInternal _AccountMsg_default_instance_;
class AllAccountsBasicStatusReply;
struct AllAccountsBasicStatusReplyDefaultTypeInternal;
extern AllAccountsBasicStatusReplyDefaultTypeInternal _AllAccountsBasicStatusReply_default_instance_;
class AllAccountsSavingDocumentReply;
struct AllAccountsSavingDocumentReplyDefaultTypeInternal;
extern AllAccountsSavingDocumentReplyDefaultTypeInternal _AllAccountsSavingDocumentReply_default_instance_;
class ChangeManagerRequest;
struct ChangeManagerRequestDefaultTypeInternal;
extern ChangeManagerRequestDefaultTypeInternal _ChangeManagerRequest_default_instance_;
class ChangePasswordRequest;
struct ChangePasswordRequestDefaultTypeInternal;
extern ChangePasswordRequestDefaultTypeInternal _ChangePasswordRequest_default_instance_;
class CheckMessageReply;
struct CheckMessageReplyDefaultTypeInternal;
extern CheckMessageReplyDefaultTypeInternal _CheckMessageReply_default_instance_;
class CreateAccountReply;
struct CreateAccountReplyDefaultTypeInternal;
extern CreateAccountReplyDefaultTypeInternal _CreateAccountReply_default_instance_;
class CreateAccountRequest;
struct CreateAccountRequestDefaultTypeInternal;
extern CreateAccountRequestDefaultTypeInternal _CreateAccountRequest_default_instance_;
class EmptyReply;
struct EmptyReplyDefaultTypeInternal;
extern EmptyReplyDefaultTypeInternal _EmptyReply_default_instance_;
class EmptyRequest;
struct EmptyRequestDefaultTypeInternal;
extern EmptyRequestDefaultTypeInternal _EmptyRequest_default_instance_;
class HelloReply;
struct HelloReplyDefaultTypeInternal;
extern HelloReplyDefaultTypeInternal _HelloReply_default_instance_;
class HelloRequest;
struct HelloRequestDefaultTypeInternal;
extern HelloRequestDefaultTypeInternal _HelloRequest_default_instance_;
class LeaveMessageRequest;
struct LeaveMessageRequestDefaultTypeInternal;
extern LeaveMessageRequestDefaultTypeInternal _LeaveMessageRequest_default_instance_;
class LockedReply;
struct LockedReplyDefaultTypeInternal;
extern LockedReplyDefaultTypeInternal _LockedReply_default_instance_;
class LoginReply;
struct LoginReplyDefaultTypeInternal;
extern LoginReplyDefaultTypeInternal _LoginReply_default_instance_;
class LoginRequest;
struct LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class SaveBalance;
struct SaveBalanceDefaultTypeInternal;
extern SaveBalanceDefaultTypeInternal _SaveBalance_default_instance_;
class SelectRequest;
struct SelectRequestDefaultTypeInternal;
extern SelectRequestDefaultTypeInternal _SelectRequest_default_instance_;
class ShowAccountReply;
struct ShowAccountReplyDefaultTypeInternal;
extern ShowAccountReplyDefaultTypeInternal _ShowAccountReply_default_instance_;
class ShowMessageReply;
struct ShowMessageReplyDefaultTypeInternal;
extern ShowMessageReplyDefaultTypeInternal _ShowMessageReply_default_instance_;
class SimpleReply;
struct SimpleReplyDefaultTypeInternal;
extern SimpleReplyDefaultTypeInternal _SimpleReply_default_instance_;
class SimpleRequest;
struct SimpleRequestDefaultTypeInternal;
extern SimpleRequestDefaultTypeInternal _SimpleRequest_default_instance_;
class UserDemandRequest;
struct UserDemandRequestDefaultTypeInternal;
extern UserDemandRequestDefaultTypeInternal _UserDemandRequest_default_instance_;
class UserLoanPayRequest;
struct UserLoanPayRequestDefaultTypeInternal;
extern UserLoanPayRequestDefaultTypeInternal _UserLoanPayRequest_default_instance_;
class UserMessage;
struct UserMessageDefaultTypeInternal;
extern UserMessageDefaultTypeInternal _UserMessage_default_instance_;
class UserSavingDepositRequest;
struct UserSavingDepositRequestDefaultTypeInternal;
extern UserSavingDepositRequestDefaultTypeInternal _UserSavingDepositRequest_default_instance_;
class UserSavingWithdrawRequest;
struct UserSavingWithdrawRequestDefaultTypeInternal;
extern UserSavingWithdrawRequestDefaultTypeInternal _UserSavingWithdrawRequest_default_instance_;
class UserTransferRequest;
struct UserTransferRequestDefaultTypeInternal;
extern UserTransferRequestDefaultTypeInternal _UserTransferRequest_default_instance_;
}  // namespace bank
PROTOBUF_NAMESPACE_OPEN
template<> ::bank::AccountMsg* Arena::CreateMaybeMessage<::bank::AccountMsg>(Arena*);
template<> ::bank::AllAccountsBasicStatusReply* Arena::CreateMaybeMessage<::bank::AllAccountsBasicStatusReply>(Arena*);
template<> ::bank::AllAccountsSavingDocumentReply* Arena::CreateMaybeMessage<::bank::AllAccountsSavingDocumentReply>(Arena*);
template<> ::bank::ChangeManagerRequest* Arena::CreateMaybeMessage<::bank::ChangeManagerRequest>(Arena*);
template<> ::bank::ChangePasswordRequest* Arena::CreateMaybeMessage<::bank::ChangePasswordRequest>(Arena*);
template<> ::bank::CheckMessageReply* Arena::CreateMaybeMessage<::bank::CheckMessageReply>(Arena*);
template<> ::bank::CreateAccountReply* Arena::CreateMaybeMessage<::bank::CreateAccountReply>(Arena*);
template<> ::bank::CreateAccountRequest* Arena::CreateMaybeMessage<::bank::CreateAccountRequest>(Arena*);
template<> ::bank::EmptyReply* Arena::CreateMaybeMessage<::bank::EmptyReply>(Arena*);
template<> ::bank::EmptyRequest* Arena::CreateMaybeMessage<::bank::EmptyRequest>(Arena*);
template<> ::bank::HelloReply* Arena::CreateMaybeMessage<::bank::HelloReply>(Arena*);
template<> ::bank::HelloRequest* Arena::CreateMaybeMessage<::bank::HelloRequest>(Arena*);
template<> ::bank::LeaveMessageRequest* Arena::CreateMaybeMessage<::bank::LeaveMessageRequest>(Arena*);
template<> ::bank::LockedReply* Arena::CreateMaybeMessage<::bank::LockedReply>(Arena*);
template<> ::bank::LoginReply* Arena::CreateMaybeMessage<::bank::LoginReply>(Arena*);
template<> ::bank::LoginRequest* Arena::CreateMaybeMessage<::bank::LoginRequest>(Arena*);
template<> ::bank::SaveBalance* Arena::CreateMaybeMessage<::bank::SaveBalance>(Arena*);
template<> ::bank::SelectRequest* Arena::CreateMaybeMessage<::bank::SelectRequest>(Arena*);
template<> ::bank::ShowAccountReply* Arena::CreateMaybeMessage<::bank::ShowAccountReply>(Arena*);
template<> ::bank::ShowMessageReply* Arena::CreateMaybeMessage<::bank::ShowMessageReply>(Arena*);
template<> ::bank::SimpleReply* Arena::CreateMaybeMessage<::bank::SimpleReply>(Arena*);
template<> ::bank::SimpleRequest* Arena::CreateMaybeMessage<::bank::SimpleRequest>(Arena*);
template<> ::bank::UserDemandRequest* Arena::CreateMaybeMessage<::bank::UserDemandRequest>(Arena*);
template<> ::bank::UserLoanPayRequest* Arena::CreateMaybeMessage<::bank::UserLoanPayRequest>(Arena*);
template<> ::bank::UserMessage* Arena::CreateMaybeMessage<::bank::UserMessage>(Arena*);
template<> ::bank::UserSavingDepositRequest* Arena::CreateMaybeMessage<::bank::UserSavingDepositRequest>(Arena*);
template<> ::bank::UserSavingWithdrawRequest* Arena::CreateMaybeMessage<::bank::UserSavingWithdrawRequest>(Arena*);
template<> ::bank::UserTransferRequest* Arena::CreateMaybeMessage<::bank::UserTransferRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bank {

enum BankError : int {
  Succeed = 0,
  Err_Selection_Input = 1,
  Err_Nofile = 2,
  Err_Input_Name = 3,
  Err_Pswd = 4,
  Err_Initial_Balance_Match_Type = 5,
  Err_Over_Draft = 6,
  Err_Over_Loan = 7,
  Err_Noid = 8,
  Err_balance_loan_no_clear = 9,
  Err_lock = 10,
  Err_Negative_Amount = 11,
  Err_Manager_Login = 12,
  Err_already_lock = 13,
  Err_already_unlock = 14,
  Err_Negative_Loan = 15,
  Err_seen_used_password = 16,
  Err_seen_modify_details = 17,
  Err_Unknown = 18,
  Err_Login_User_Pswd = 19,
  Err_NoType = 20,
  Err_FullMessage = 21,
  Err_ID_Message = 22,
  Err_Pswd_Length = 23,
  Err_Pswd_Unmatched = 24,
  BankError_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BankError_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BankError_IsValid(int value);
constexpr BankError BankError_MIN = Succeed;
constexpr BankError BankError_MAX = Err_Pswd_Unmatched;
constexpr int BankError_ARRAYSIZE = BankError_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BankError_descriptor();
template<typename T>
inline const std::string& BankError_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BankError>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BankError_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BankError_descriptor(), enum_t_value);
}
inline bool BankError_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BankError* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BankError>(
    BankError_descriptor(), name, value);
}
enum TypeOfAccount : int {
  Type_User = 0,
  Type_Manager = 1,
  TypeOfAccount_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TypeOfAccount_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TypeOfAccount_IsValid(int value);
constexpr TypeOfAccount TypeOfAccount_MIN = Type_User;
constexpr TypeOfAccount TypeOfAccount_MAX = Type_Manager;
constexpr int TypeOfAccount_ARRAYSIZE = TypeOfAccount_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TypeOfAccount_descriptor();
template<typename T>
inline const std::string& TypeOfAccount_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TypeOfAccount>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TypeOfAccount_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TypeOfAccount_descriptor(), enum_t_value);
}
inline bool TypeOfAccount_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TypeOfAccount* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TypeOfAccount>(
    TypeOfAccount_descriptor(), name, value);
}
enum TypeOfSavings : int {
  Minutes_5 = 0,
  Minutes_10 = 1,
  TypeOfSavings_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TypeOfSavings_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TypeOfSavings_IsValid(int value);
constexpr TypeOfSavings TypeOfSavings_MIN = Minutes_5;
constexpr TypeOfSavings TypeOfSavings_MAX = Minutes_10;
constexpr int TypeOfSavings_ARRAYSIZE = TypeOfSavings_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TypeOfSavings_descriptor();
template<typename T>
inline const std::string& TypeOfSavings_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TypeOfSavings>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TypeOfSavings_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TypeOfSavings_descriptor(), enum_t_value);
}
inline bool TypeOfSavings_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TypeOfSavings* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TypeOfSavings>(
    TypeOfSavings_descriptor(), name, value);
}
// ===================================================================

class SaveBalance PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.SaveBalance) */ {
 public:
  inline SaveBalance() : SaveBalance(nullptr) {}
  virtual ~SaveBalance();
  explicit constexpr SaveBalance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SaveBalance(const SaveBalance& from);
  SaveBalance(SaveBalance&& from) noexcept
    : SaveBalance() {
    *this = ::std::move(from);
  }

  inline SaveBalance& operator=(const SaveBalance& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveBalance& operator=(SaveBalance&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SaveBalance& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaveBalance* internal_default_instance() {
    return reinterpret_cast<const SaveBalance*>(
               &_SaveBalance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SaveBalance& a, SaveBalance& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveBalance* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveBalance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SaveBalance* New() const final {
    return CreateMaybeMessage<SaveBalance>(nullptr);
  }

  SaveBalance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaveBalance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SaveBalance& from);
  void MergeFrom(const SaveBalance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveBalance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.SaveBalance";
  }
  protected:
  explicit SaveBalance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bank_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTmFieldNumber = 3,
    kBalanceFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string tm = 3;
  void clear_tm();
  const std::string& tm() const;
  void set_tm(const std::string& value);
  void set_tm(std::string&& value);
  void set_tm(const char* value);
  void set_tm(const char* value, size_t size);
  std::string* mutable_tm();
  std::string* release_tm();
  void set_allocated_tm(std::string* tm);
  private:
  const std::string& _internal_tm() const;
  void _internal_set_tm(const std::string& value);
  std::string* _internal_mutable_tm();
  public:

  // double balance = 2;
  void clear_balance();
  double balance() const;
  void set_balance(double value);
  private:
  double _internal_balance() const;
  void _internal_set_balance(double value);
  public:

  // .bank.TypeOfSavings type = 1;
  void clear_type();
  ::bank::TypeOfSavings type() const;
  void set_type(::bank::TypeOfSavings value);
  private:
  ::bank::TypeOfSavings _internal_type() const;
  void _internal_set_type(::bank::TypeOfSavings value);
  public:

  // @@protoc_insertion_point(class_scope:bank.SaveBalance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tm_;
  double balance_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class AccountMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.AccountMsg) */ {
 public:
  inline AccountMsg() : AccountMsg(nullptr) {}
  virtual ~AccountMsg();
  explicit constexpr AccountMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountMsg(const AccountMsg& from);
  AccountMsg(AccountMsg&& from) noexcept
    : AccountMsg() {
    *this = ::std::move(from);
  }

  inline AccountMsg& operator=(const AccountMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountMsg& operator=(AccountMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AccountMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountMsg* internal_default_instance() {
    return reinterpret_cast<const AccountMsg*>(
               &_AccountMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AccountMsg& a, AccountMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccountMsg* New() const final {
    return CreateMaybeMessage<AccountMsg>(nullptr);
  }

  AccountMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccountMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AccountMsg& from);
  void MergeFrom(const AccountMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.AccountMsg";
  }
  protected:
  explicit AccountMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bank_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBalancesFieldNumber = 9,
    kNameFieldNumber = 2,
    kPasswordFieldNumber = 5,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 3,
    kDemandBalanceFieldNumber = 4,
    kLoanFieldNumber = 7,
    kAutoPaymentFieldNumber = 8,
    kLockedFieldNumber = 6,
  };
  // repeated .bank.SaveBalance balances = 9;
  int balances_size() const;
  private:
  int _internal_balances_size() const;
  public:
  void clear_balances();
  ::bank::SaveBalance* mutable_balances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bank::SaveBalance >*
      mutable_balances();
  private:
  const ::bank::SaveBalance& _internal_balances(int index) const;
  ::bank::SaveBalance* _internal_add_balances();
  public:
  const ::bank::SaveBalance& balances(int index) const;
  ::bank::SaveBalance* add_balances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bank::SaveBalance >&
      balances() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string password = 5;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double demand_balance = 4;
  void clear_demand_balance();
  double demand_balance() const;
  void set_demand_balance(double value);
  private:
  double _internal_demand_balance() const;
  void _internal_set_demand_balance(double value);
  public:

  // double loan = 7;
  void clear_loan();
  double loan() const;
  void set_loan(double value);
  private:
  double _internal_loan() const;
  void _internal_set_loan(double value);
  public:

  // double auto_payment = 8;
  void clear_auto_payment();
  double auto_payment() const;
  void set_auto_payment(double value);
  private:
  double _internal_auto_payment() const;
  void _internal_set_auto_payment(double value);
  public:

  // int32 locked = 6;
  void clear_locked();
  ::PROTOBUF_NAMESPACE_ID::int32 locked() const;
  void set_locked(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_locked() const;
  void _internal_set_locked(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bank.AccountMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bank::SaveBalance > balances_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  double demand_balance_;
  double loan_;
  double auto_payment_;
  ::PROTOBUF_NAMESPACE_ID::int32 locked_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class CheckMessageReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.CheckMessageReply) */ {
 public:
  inline CheckMessageReply() : CheckMessageReply(nullptr) {}
  virtual ~CheckMessageReply();
  explicit constexpr CheckMessageReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CheckMessageReply(const CheckMessageReply& from);
  CheckMessageReply(CheckMessageReply&& from) noexcept
    : CheckMessageReply() {
    *this = ::std::move(from);
  }

  inline CheckMessageReply& operator=(const CheckMessageReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckMessageReply& operator=(CheckMessageReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckMessageReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckMessageReply* internal_default_instance() {
    return reinterpret_cast<const CheckMessageReply*>(
               &_CheckMessageReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CheckMessageReply& a, CheckMessageReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckMessageReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckMessageReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckMessageReply* New() const final {
    return CreateMaybeMessage<CheckMessageReply>(nullptr);
  }

  CheckMessageReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckMessageReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckMessageReply& from);
  void MergeFrom(const CheckMessageReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckMessageReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.CheckMessageReply";
  }
  protected:
  explicit CheckMessageReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bank_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgSizeFieldNumber = 1,
  };
  // int32 msg_size = 1;
  void clear_msg_size();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_size() const;
  void set_msg_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_size() const;
  void _internal_set_msg_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bank.CheckMessageReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class HelloRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.HelloRequest) */ {
 public:
  inline HelloRequest() : HelloRequest(nullptr) {}
  virtual ~HelloRequest();
  explicit constexpr HelloRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HelloRequest(const HelloRequest& from);
  HelloRequest(HelloRequest&& from) noexcept
    : HelloRequest() {
    *this = ::std::move(from);
  }

  inline HelloRequest& operator=(const HelloRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloRequest& operator=(HelloRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HelloRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HelloRequest* internal_default_instance() {
    return reinterpret_cast<const HelloRequest*>(
               &_HelloRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HelloRequest& a, HelloRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HelloRequest* New() const final {
    return CreateMaybeMessage<HelloRequest>(nullptr);
  }

  HelloRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HelloRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HelloRequest& from);
  void MergeFrom(const HelloRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.HelloRequest";
  }
  protected:
  explicit HelloRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bank_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:bank.HelloRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class HelloReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.HelloReply) */ {
 public:
  inline HelloReply() : HelloReply(nullptr) {}
  virtual ~HelloReply();
  explicit constexpr HelloReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HelloReply(const HelloReply& from);
  HelloReply(HelloReply&& from) noexcept
    : HelloReply() {
    *this = ::std::move(from);
  }

  inline HelloReply& operator=(const HelloReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline HelloReply& operator=(HelloReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HelloReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const HelloReply* internal_default_instance() {
    return reinterpret_cast<const HelloReply*>(
               &_HelloReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HelloReply& a, HelloReply& b) {
    a.Swap(&b);
  }
  inline void Swap(HelloReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HelloReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HelloReply* New() const final {
    return CreateMaybeMessage<HelloReply>(nullptr);
  }

  HelloReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HelloReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HelloReply& from);
  void MergeFrom(const HelloReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.HelloReply";
  }
  protected:
  explicit HelloReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bank_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:bank.HelloReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class EmptyRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.EmptyRequest) */ {
 public:
  inline EmptyRequest() : EmptyRequest(nullptr) {}
  virtual ~EmptyRequest();
  explicit constexpr EmptyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmptyRequest(const EmptyRequest& from);
  EmptyRequest(EmptyRequest&& from) noexcept
    : EmptyRequest() {
    *this = ::std::move(from);
  }

  inline EmptyRequest& operator=(const EmptyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmptyRequest& operator=(EmptyRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmptyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmptyRequest* internal_default_instance() {
    return reinterpret_cast<const EmptyRequest*>(
               &_EmptyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EmptyRequest& a, EmptyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EmptyRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmptyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmptyRequest* New() const final {
    return CreateMaybeMessage<EmptyRequest>(nullptr);
  }

  EmptyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmptyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmptyRequest& from);
  void MergeFrom(const EmptyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.EmptyRequest";
  }
  protected:
  explicit EmptyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bank_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bank.EmptyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class EmptyReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.EmptyReply) */ {
 public:
  inline EmptyReply() : EmptyReply(nullptr) {}
  virtual ~EmptyReply();
  explicit constexpr EmptyReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmptyReply(const EmptyReply& from);
  EmptyReply(EmptyReply&& from) noexcept
    : EmptyReply() {
    *this = ::std::move(from);
  }

  inline EmptyReply& operator=(const EmptyReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmptyReply& operator=(EmptyReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmptyReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmptyReply* internal_default_instance() {
    return reinterpret_cast<const EmptyReply*>(
               &_EmptyReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(EmptyReply& a, EmptyReply& b) {
    a.Swap(&b);
  }
  inline void Swap(EmptyReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmptyReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmptyReply* New() const final {
    return CreateMaybeMessage<EmptyReply>(nullptr);
  }

  EmptyReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmptyReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmptyReply& from);
  void MergeFrom(const EmptyReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmptyReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.EmptyReply";
  }
  protected:
  explicit EmptyReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bank_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:bank.EmptyReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class LockedReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.LockedReply) */ {
 public:
  inline LockedReply() : LockedReply(nullptr) {}
  virtual ~LockedReply();
  explicit constexpr LockedReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LockedReply(const LockedReply& from);
  LockedReply(LockedReply&& from) noexcept
    : LockedReply() {
    *this = ::std::move(from);
  }

  inline LockedReply& operator=(const LockedReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline LockedReply& operator=(LockedReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LockedReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const LockedReply* internal_default_instance() {
    return reinterpret_cast<const LockedReply*>(
               &_LockedReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LockedReply& a, LockedReply& b) {
    a.Swap(&b);
  }
  inline void Swap(LockedReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LockedReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LockedReply* New() const final {
    return CreateMaybeMessage<LockedReply>(nullptr);
  }

  LockedReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LockedReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LockedReply& from);
  void MergeFrom(const LockedReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockedReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.LockedReply";
  }
  protected:
  explicit LockedReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bank_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLockedFieldNumber = 1,
  };
  // int32 locked = 1;
  void clear_locked();
  ::PROTOBUF_NAMESPACE_ID::int32 locked() const;
  void set_locked(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_locked() const;
  void _internal_set_locked(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bank.LockedReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 locked_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class SelectRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.SelectRequest) */ {
 public:
  inline SelectRequest() : SelectRequest(nullptr) {}
  virtual ~SelectRequest();
  explicit constexpr SelectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectRequest(const SelectRequest& from);
  SelectRequest(SelectRequest&& from) noexcept
    : SelectRequest() {
    *this = ::std::move(from);
  }

  inline SelectRequest& operator=(const SelectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectRequest& operator=(SelectRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SelectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectRequest* internal_default_instance() {
    return reinterpret_cast<const SelectRequest*>(
               &_SelectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SelectRequest& a, SelectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SelectRequest* New() const final {
    return CreateMaybeMessage<SelectRequest>(nullptr);
  }

  SelectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SelectRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SelectRequest& from);
  void MergeFrom(const SelectRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SelectRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.SelectRequest";
  }
  protected:
  explicit SelectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bank_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSureFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // int32 sure = 1;
  void clear_sure();
  ::PROTOBUF_NAMESPACE_ID::int32 sure() const;
  void set_sure(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sure() const;
  void _internal_set_sure(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bank.SelectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 sure_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class SimpleRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.SimpleRequest) */ {
 public:
  inline SimpleRequest() : SimpleRequest(nullptr) {}
  virtual ~SimpleRequest();
  explicit constexpr SimpleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimpleRequest(const SimpleRequest& from);
  SimpleRequest(SimpleRequest&& from) noexcept
    : SimpleRequest() {
    *this = ::std::move(from);
  }

  inline SimpleRequest& operator=(const SimpleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleRequest& operator=(SimpleRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimpleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleRequest* internal_default_instance() {
    return reinterpret_cast<const SimpleRequest*>(
               &_SimpleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SimpleRequest& a, SimpleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimpleRequest* New() const final {
    return CreateMaybeMessage<SimpleRequest>(nullptr);
  }

  SimpleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimpleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimpleRequest& from);
  void MergeFrom(const SimpleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.SimpleRequest";
  }
  protected:
  explicit SimpleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bank_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bank.SimpleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class SimpleReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.SimpleReply) */ {
 public:
  inline SimpleReply() : SimpleReply(nullptr) {}
  virtual ~SimpleReply();
  explicit constexpr SimpleReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimpleReply(const SimpleReply& from);
  SimpleReply(SimpleReply&& from) noexcept
    : SimpleReply() {
    *this = ::std::move(from);
  }

  inline SimpleReply& operator=(const SimpleReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleReply& operator=(SimpleReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SimpleReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleReply* internal_default_instance() {
    return reinterpret_cast<const SimpleReply*>(
               &_SimpleReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SimpleReply& a, SimpleReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SimpleReply* New() const final {
    return CreateMaybeMessage<SimpleReply>(nullptr);
  }

  SimpleReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SimpleReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SimpleReply& from);
  void MergeFrom(const SimpleReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.SimpleReply";
  }
  protected:
  explicit SimpleReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bank_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // .bank.BankError code = 1;
  void clear_code();
  ::bank::BankError code() const;
  void set_code(::bank::BankError value);
  private:
  ::bank::BankError _internal_code() const;
  void _internal_set_code(::bank::BankError value);
  public:

  // @@protoc_insertion_point(class_scope:bank.SimpleReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class CreateAccountRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.CreateAccountRequest) */ {
 public:
  inline CreateAccountRequest() : CreateAccountRequest(nullptr) {}
  virtual ~CreateAccountRequest();
  explicit constexpr CreateAccountRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAccountRequest(const CreateAccountRequest& from);
  CreateAccountRequest(CreateAccountRequest&& from) noexcept
    : CreateAccountRequest() {
    *this = ::std::move(from);
  }

  inline CreateAccountRequest& operator=(const CreateAccountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccountRequest& operator=(CreateAccountRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateAccountRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAccountRequest* internal_default_instance() {
    return reinterpret_cast<const CreateAccountRequest*>(
               &_CreateAccountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CreateAccountRequest& a, CreateAccountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAccountRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAccountRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAccountRequest* New() const final {
    return CreateMaybeMessage<CreateAccountRequest>(nullptr);
  }

  CreateAccountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAccountRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateAccountRequest& from);
  void MergeFrom(const CreateAccountRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.CreateAccountRequest";
  }
  protected:
  explicit CreateAccountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bank_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPswdFieldNumber = 2,
    kBalanceFieldNumber = 4,
    kTypeFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string pswd = 2;
  void clear_pswd();
  const std::string& pswd() const;
  void set_pswd(const std::string& value);
  void set_pswd(std::string&& value);
  void set_pswd(const char* value);
  void set_pswd(const char* value, size_t size);
  std::string* mutable_pswd();
  std::string* release_pswd();
  void set_allocated_pswd(std::string* pswd);
  private:
  const std::string& _internal_pswd() const;
  void _internal_set_pswd(const std::string& value);
  std::string* _internal_mutable_pswd();
  public:

  // double balance = 4;
  void clear_balance();
  double balance() const;
  void set_balance(double value);
  private:
  double _internal_balance() const;
  void _internal_set_balance(double value);
  public:

  // int32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bank.CreateAccountRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pswd_;
  double balance_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class CreateAccountReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.CreateAccountReply) */ {
 public:
  inline CreateAccountReply() : CreateAccountReply(nullptr) {}
  virtual ~CreateAccountReply();
  explicit constexpr CreateAccountReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateAccountReply(const CreateAccountReply& from);
  CreateAccountReply(CreateAccountReply&& from) noexcept
    : CreateAccountReply() {
    *this = ::std::move(from);
  }

  inline CreateAccountReply& operator=(const CreateAccountReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateAccountReply& operator=(CreateAccountReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateAccountReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateAccountReply* internal_default_instance() {
    return reinterpret_cast<const CreateAccountReply*>(
               &_CreateAccountReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CreateAccountReply& a, CreateAccountReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateAccountReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateAccountReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateAccountReply* New() const final {
    return CreateMaybeMessage<CreateAccountReply>(nullptr);
  }

  CreateAccountReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateAccountReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateAccountReply& from);
  void MergeFrom(const CreateAccountReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateAccountReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.CreateAccountReply";
  }
  protected:
  explicit CreateAccountReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bank_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // .bank.BankError code = 1;
  void clear_code();
  ::bank::BankError code() const;
  void set_code(::bank::BankError value);
  private:
  ::bank::BankError _internal_code() const;
  void _internal_set_code(::bank::BankError value);
  public:

  // int32 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bank.CreateAccountReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int code_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class LoginRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.LoginRequest) */ {
 public:
  inline LoginRequest() : LoginRequest(nullptr) {}
  virtual ~LoginRequest();
  explicit constexpr LoginRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginRequest* New() const final {
    return CreateMaybeMessage<LoginRequest>(nullptr);
  }

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginRequest& from);
  void MergeFrom(const LoginRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.LoginRequest";
  }
  protected:
  explicit LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bank_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPswdFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string pswd = 2;
  void clear_pswd();
  const std::string& pswd() const;
  void set_pswd(const std::string& value);
  void set_pswd(std::string&& value);
  void set_pswd(const char* value);
  void set_pswd(const char* value, size_t size);
  std::string* mutable_pswd();
  std::string* release_pswd();
  void set_allocated_pswd(std::string* pswd);
  private:
  const std::string& _internal_pswd() const;
  void _internal_set_pswd(const std::string& value);
  std::string* _internal_mutable_pswd();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bank.LoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pswd_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class LoginReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.LoginReply) */ {
 public:
  inline LoginReply() : LoginReply(nullptr) {}
  virtual ~LoginReply();
  explicit constexpr LoginReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginReply(const LoginReply& from);
  LoginReply(LoginReply&& from) noexcept
    : LoginReply() {
    *this = ::std::move(from);
  }

  inline LoginReply& operator=(const LoginReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReply& operator=(LoginReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginReply* internal_default_instance() {
    return reinterpret_cast<const LoginReply*>(
               &_LoginReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(LoginReply& a, LoginReply& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginReply* New() const final {
    return CreateMaybeMessage<LoginReply>(nullptr);
  }

  LoginReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginReply& from);
  void MergeFrom(const LoginReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.LoginReply";
  }
  protected:
  explicit LoginReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bank_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kCodeFieldNumber = 1,
    kLockedFieldNumber = 3,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .bank.BankError code = 1;
  void clear_code();
  ::bank::BankError code() const;
  void set_code(::bank::BankError value);
  private:
  ::bank::BankError _internal_code() const;
  void _internal_set_code(::bank::BankError value);
  public:

  // int32 locked = 3;
  void clear_locked();
  ::PROTOBUF_NAMESPACE_ID::int32 locked() const;
  void set_locked(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_locked() const;
  void _internal_set_locked(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bank.LoginReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int code_;
  ::PROTOBUF_NAMESPACE_ID::int32 locked_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class UserDemandRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.UserDemandRequest) */ {
 public:
  inline UserDemandRequest() : UserDemandRequest(nullptr) {}
  virtual ~UserDemandRequest();
  explicit constexpr UserDemandRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserDemandRequest(const UserDemandRequest& from);
  UserDemandRequest(UserDemandRequest&& from) noexcept
    : UserDemandRequest() {
    *this = ::std::move(from);
  }

  inline UserDemandRequest& operator=(const UserDemandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserDemandRequest& operator=(UserDemandRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserDemandRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserDemandRequest* internal_default_instance() {
    return reinterpret_cast<const UserDemandRequest*>(
               &_UserDemandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(UserDemandRequest& a, UserDemandRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserDemandRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserDemandRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserDemandRequest* New() const final {
    return CreateMaybeMessage<UserDemandRequest>(nullptr);
  }

  UserDemandRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserDemandRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserDemandRequest& from);
  void MergeFrom(const UserDemandRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserDemandRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.UserDemandRequest";
  }
  protected:
  explicit UserDemandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bank_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // double amount = 2;
  void clear_amount();
  double amount() const;
  void set_amount(double value);
  private:
  double _internal_amount() const;
  void _internal_set_amount(double value);
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bank.UserDemandRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double amount_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class UserSavingDepositRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.UserSavingDepositRequest) */ {
 public:
  inline UserSavingDepositRequest() : UserSavingDepositRequest(nullptr) {}
  virtual ~UserSavingDepositRequest();
  explicit constexpr UserSavingDepositRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserSavingDepositRequest(const UserSavingDepositRequest& from);
  UserSavingDepositRequest(UserSavingDepositRequest&& from) noexcept
    : UserSavingDepositRequest() {
    *this = ::std::move(from);
  }

  inline UserSavingDepositRequest& operator=(const UserSavingDepositRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserSavingDepositRequest& operator=(UserSavingDepositRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserSavingDepositRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserSavingDepositRequest* internal_default_instance() {
    return reinterpret_cast<const UserSavingDepositRequest*>(
               &_UserSavingDepositRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(UserSavingDepositRequest& a, UserSavingDepositRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserSavingDepositRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserSavingDepositRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserSavingDepositRequest* New() const final {
    return CreateMaybeMessage<UserSavingDepositRequest>(nullptr);
  }

  UserSavingDepositRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserSavingDepositRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserSavingDepositRequest& from);
  void MergeFrom(const UserSavingDepositRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSavingDepositRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.UserSavingDepositRequest";
  }
  protected:
  explicit UserSavingDepositRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bank_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 2,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 3,
  };
  // double amount = 2;
  void clear_amount();
  double amount() const;
  void set_amount(double value);
  private:
  double _internal_amount() const;
  void _internal_set_amount(double value);
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .bank.TypeOfSavings type = 3;
  void clear_type();
  ::bank::TypeOfSavings type() const;
  void set_type(::bank::TypeOfSavings value);
  private:
  ::bank::TypeOfSavings _internal_type() const;
  void _internal_set_type(::bank::TypeOfSavings value);
  public:

  // @@protoc_insertion_point(class_scope:bank.UserSavingDepositRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double amount_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class ShowAccountReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.ShowAccountReply) */ {
 public:
  inline ShowAccountReply() : ShowAccountReply(nullptr) {}
  virtual ~ShowAccountReply();
  explicit constexpr ShowAccountReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShowAccountReply(const ShowAccountReply& from);
  ShowAccountReply(ShowAccountReply&& from) noexcept
    : ShowAccountReply() {
    *this = ::std::move(from);
  }

  inline ShowAccountReply& operator=(const ShowAccountReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowAccountReply& operator=(ShowAccountReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShowAccountReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShowAccountReply* internal_default_instance() {
    return reinterpret_cast<const ShowAccountReply*>(
               &_ShowAccountReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ShowAccountReply& a, ShowAccountReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowAccountReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowAccountReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShowAccountReply* New() const final {
    return CreateMaybeMessage<ShowAccountReply>(nullptr);
  }

  ShowAccountReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShowAccountReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShowAccountReply& from);
  void MergeFrom(const ShowAccountReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowAccountReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.ShowAccountReply";
  }
  protected:
  explicit ShowAccountReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bank_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccFieldNumber = 1,
  };
  // .bank.AccountMsg acc = 1;
  bool has_acc() const;
  private:
  bool _internal_has_acc() const;
  public:
  void clear_acc();
  const ::bank::AccountMsg& acc() const;
  ::bank::AccountMsg* release_acc();
  ::bank::AccountMsg* mutable_acc();
  void set_allocated_acc(::bank::AccountMsg* acc);
  private:
  const ::bank::AccountMsg& _internal_acc() const;
  ::bank::AccountMsg* _internal_mutable_acc();
  public:
  void unsafe_arena_set_allocated_acc(
      ::bank::AccountMsg* acc);
  ::bank::AccountMsg* unsafe_arena_release_acc();

  // @@protoc_insertion_point(class_scope:bank.ShowAccountReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bank::AccountMsg* acc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class UserSavingWithdrawRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.UserSavingWithdrawRequest) */ {
 public:
  inline UserSavingWithdrawRequest() : UserSavingWithdrawRequest(nullptr) {}
  virtual ~UserSavingWithdrawRequest();
  explicit constexpr UserSavingWithdrawRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserSavingWithdrawRequest(const UserSavingWithdrawRequest& from);
  UserSavingWithdrawRequest(UserSavingWithdrawRequest&& from) noexcept
    : UserSavingWithdrawRequest() {
    *this = ::std::move(from);
  }

  inline UserSavingWithdrawRequest& operator=(const UserSavingWithdrawRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserSavingWithdrawRequest& operator=(UserSavingWithdrawRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserSavingWithdrawRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserSavingWithdrawRequest* internal_default_instance() {
    return reinterpret_cast<const UserSavingWithdrawRequest*>(
               &_UserSavingWithdrawRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(UserSavingWithdrawRequest& a, UserSavingWithdrawRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserSavingWithdrawRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserSavingWithdrawRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserSavingWithdrawRequest* New() const final {
    return CreateMaybeMessage<UserSavingWithdrawRequest>(nullptr);
  }

  UserSavingWithdrawRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserSavingWithdrawRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserSavingWithdrawRequest& from);
  void MergeFrom(const UserSavingWithdrawRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserSavingWithdrawRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.UserSavingWithdrawRequest";
  }
  protected:
  explicit UserSavingWithdrawRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bank_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSerialFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 serial = 2;
  void clear_serial();
  ::PROTOBUF_NAMESPACE_ID::int32 serial() const;
  void set_serial(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serial() const;
  void _internal_set_serial(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bank.UserSavingWithdrawRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 serial_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class ChangePasswordRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.ChangePasswordRequest) */ {
 public:
  inline ChangePasswordRequest() : ChangePasswordRequest(nullptr) {}
  virtual ~ChangePasswordRequest();
  explicit constexpr ChangePasswordRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangePasswordRequest(const ChangePasswordRequest& from);
  ChangePasswordRequest(ChangePasswordRequest&& from) noexcept
    : ChangePasswordRequest() {
    *this = ::std::move(from);
  }

  inline ChangePasswordRequest& operator=(const ChangePasswordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangePasswordRequest& operator=(ChangePasswordRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangePasswordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangePasswordRequest* internal_default_instance() {
    return reinterpret_cast<const ChangePasswordRequest*>(
               &_ChangePasswordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ChangePasswordRequest& a, ChangePasswordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangePasswordRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangePasswordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangePasswordRequest* New() const final {
    return CreateMaybeMessage<ChangePasswordRequest>(nullptr);
  }

  ChangePasswordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangePasswordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangePasswordRequest& from);
  void MergeFrom(const ChangePasswordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangePasswordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.ChangePasswordRequest";
  }
  protected:
  explicit ChangePasswordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bank_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string password = 2;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bank.ChangePasswordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class ChangeManagerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.ChangeManagerRequest) */ {
 public:
  inline ChangeManagerRequest() : ChangeManagerRequest(nullptr) {}
  virtual ~ChangeManagerRequest();
  explicit constexpr ChangeManagerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeManagerRequest(const ChangeManagerRequest& from);
  ChangeManagerRequest(ChangeManagerRequest&& from) noexcept
    : ChangeManagerRequest() {
    *this = ::std::move(from);
  }

  inline ChangeManagerRequest& operator=(const ChangeManagerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeManagerRequest& operator=(ChangeManagerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChangeManagerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeManagerRequest* internal_default_instance() {
    return reinterpret_cast<const ChangeManagerRequest*>(
               &_ChangeManagerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ChangeManagerRequest& a, ChangeManagerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeManagerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeManagerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeManagerRequest* New() const final {
    return CreateMaybeMessage<ChangeManagerRequest>(nullptr);
  }

  ChangeManagerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeManagerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChangeManagerRequest& from);
  void MergeFrom(const ChangeManagerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeManagerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.ChangeManagerRequest";
  }
  protected:
  explicit ChangeManagerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bank_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPswdFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string pswd = 2;
  void clear_pswd();
  const std::string& pswd() const;
  void set_pswd(const std::string& value);
  void set_pswd(std::string&& value);
  void set_pswd(const char* value);
  void set_pswd(const char* value, size_t size);
  std::string* mutable_pswd();
  std::string* release_pswd();
  void set_allocated_pswd(std::string* pswd);
  private:
  const std::string& _internal_pswd() const;
  void _internal_set_pswd(const std::string& value);
  std::string* _internal_mutable_pswd();
  public:

  // @@protoc_insertion_point(class_scope:bank.ChangeManagerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pswd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class UserTransferRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.UserTransferRequest) */ {
 public:
  inline UserTransferRequest() : UserTransferRequest(nullptr) {}
  virtual ~UserTransferRequest();
  explicit constexpr UserTransferRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserTransferRequest(const UserTransferRequest& from);
  UserTransferRequest(UserTransferRequest&& from) noexcept
    : UserTransferRequest() {
    *this = ::std::move(from);
  }

  inline UserTransferRequest& operator=(const UserTransferRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserTransferRequest& operator=(UserTransferRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserTransferRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserTransferRequest* internal_default_instance() {
    return reinterpret_cast<const UserTransferRequest*>(
               &_UserTransferRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(UserTransferRequest& a, UserTransferRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserTransferRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserTransferRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserTransferRequest* New() const final {
    return CreateMaybeMessage<UserTransferRequest>(nullptr);
  }

  UserTransferRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserTransferRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserTransferRequest& from);
  void MergeFrom(const UserTransferRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserTransferRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.UserTransferRequest";
  }
  protected:
  explicit UserTransferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bank_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOriginalIdFieldNumber = 1,
    kTransferIdFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // int32 original_id = 1;
  void clear_original_id();
  ::PROTOBUF_NAMESPACE_ID::int32 original_id() const;
  void set_original_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_original_id() const;
  void _internal_set_original_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 transfer_id = 2;
  void clear_transfer_id();
  ::PROTOBUF_NAMESPACE_ID::int32 transfer_id() const;
  void set_transfer_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_transfer_id() const;
  void _internal_set_transfer_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double amount = 3;
  void clear_amount();
  double amount() const;
  void set_amount(double value);
  private:
  double _internal_amount() const;
  void _internal_set_amount(double value);
  public:

  // @@protoc_insertion_point(class_scope:bank.UserTransferRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 original_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 transfer_id_;
  double amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class UserLoanPayRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.UserLoanPayRequest) */ {
 public:
  inline UserLoanPayRequest() : UserLoanPayRequest(nullptr) {}
  virtual ~UserLoanPayRequest();
  explicit constexpr UserLoanPayRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserLoanPayRequest(const UserLoanPayRequest& from);
  UserLoanPayRequest(UserLoanPayRequest&& from) noexcept
    : UserLoanPayRequest() {
    *this = ::std::move(from);
  }

  inline UserLoanPayRequest& operator=(const UserLoanPayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLoanPayRequest& operator=(UserLoanPayRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserLoanPayRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserLoanPayRequest* internal_default_instance() {
    return reinterpret_cast<const UserLoanPayRequest*>(
               &_UserLoanPayRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(UserLoanPayRequest& a, UserLoanPayRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLoanPayRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLoanPayRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserLoanPayRequest* New() const final {
    return CreateMaybeMessage<UserLoanPayRequest>(nullptr);
  }

  UserLoanPayRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserLoanPayRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserLoanPayRequest& from);
  void MergeFrom(const UserLoanPayRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLoanPayRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.UserLoanPayRequest";
  }
  protected:
  explicit UserLoanPayRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bank_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNFieldNumber = 2,
    kAmountFieldNumber = 3,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 n = 2;
  void clear_n();
  ::PROTOBUF_NAMESPACE_ID::int32 n() const;
  void set_n(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_n() const;
  void _internal_set_n(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double amount = 3;
  void clear_amount();
  double amount() const;
  void set_amount(double value);
  private:
  double _internal_amount() const;
  void _internal_set_amount(double value);
  public:

  // @@protoc_insertion_point(class_scope:bank.UserLoanPayRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 n_;
  double amount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class AllAccountsBasicStatusReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.AllAccountsBasicStatusReply) */ {
 public:
  inline AllAccountsBasicStatusReply() : AllAccountsBasicStatusReply(nullptr) {}
  virtual ~AllAccountsBasicStatusReply();
  explicit constexpr AllAccountsBasicStatusReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AllAccountsBasicStatusReply(const AllAccountsBasicStatusReply& from);
  AllAccountsBasicStatusReply(AllAccountsBasicStatusReply&& from) noexcept
    : AllAccountsBasicStatusReply() {
    *this = ::std::move(from);
  }

  inline AllAccountsBasicStatusReply& operator=(const AllAccountsBasicStatusReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllAccountsBasicStatusReply& operator=(AllAccountsBasicStatusReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AllAccountsBasicStatusReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllAccountsBasicStatusReply* internal_default_instance() {
    return reinterpret_cast<const AllAccountsBasicStatusReply*>(
               &_AllAccountsBasicStatusReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(AllAccountsBasicStatusReply& a, AllAccountsBasicStatusReply& b) {
    a.Swap(&b);
  }
  inline void Swap(AllAccountsBasicStatusReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllAccountsBasicStatusReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllAccountsBasicStatusReply* New() const final {
    return CreateMaybeMessage<AllAccountsBasicStatusReply>(nullptr);
  }

  AllAccountsBasicStatusReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllAccountsBasicStatusReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AllAccountsBasicStatusReply& from);
  void MergeFrom(const AllAccountsBasicStatusReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllAccountsBasicStatusReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.AllAccountsBasicStatusReply";
  }
  protected:
  explicit AllAccountsBasicStatusReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bank_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccsFieldNumber = 1,
  };
  // repeated .bank.AccountMsg accs = 1;
  int accs_size() const;
  private:
  int _internal_accs_size() const;
  public:
  void clear_accs();
  ::bank::AccountMsg* mutable_accs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bank::AccountMsg >*
      mutable_accs();
  private:
  const ::bank::AccountMsg& _internal_accs(int index) const;
  ::bank::AccountMsg* _internal_add_accs();
  public:
  const ::bank::AccountMsg& accs(int index) const;
  ::bank::AccountMsg* add_accs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bank::AccountMsg >&
      accs() const;

  // @@protoc_insertion_point(class_scope:bank.AllAccountsBasicStatusReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bank::AccountMsg > accs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class AllAccountsSavingDocumentReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.AllAccountsSavingDocumentReply) */ {
 public:
  inline AllAccountsSavingDocumentReply() : AllAccountsSavingDocumentReply(nullptr) {}
  virtual ~AllAccountsSavingDocumentReply();
  explicit constexpr AllAccountsSavingDocumentReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AllAccountsSavingDocumentReply(const AllAccountsSavingDocumentReply& from);
  AllAccountsSavingDocumentReply(AllAccountsSavingDocumentReply&& from) noexcept
    : AllAccountsSavingDocumentReply() {
    *this = ::std::move(from);
  }

  inline AllAccountsSavingDocumentReply& operator=(const AllAccountsSavingDocumentReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AllAccountsSavingDocumentReply& operator=(AllAccountsSavingDocumentReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AllAccountsSavingDocumentReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const AllAccountsSavingDocumentReply* internal_default_instance() {
    return reinterpret_cast<const AllAccountsSavingDocumentReply*>(
               &_AllAccountsSavingDocumentReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(AllAccountsSavingDocumentReply& a, AllAccountsSavingDocumentReply& b) {
    a.Swap(&b);
  }
  inline void Swap(AllAccountsSavingDocumentReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AllAccountsSavingDocumentReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AllAccountsSavingDocumentReply* New() const final {
    return CreateMaybeMessage<AllAccountsSavingDocumentReply>(nullptr);
  }

  AllAccountsSavingDocumentReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AllAccountsSavingDocumentReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AllAccountsSavingDocumentReply& from);
  void MergeFrom(const AllAccountsSavingDocumentReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AllAccountsSavingDocumentReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.AllAccountsSavingDocumentReply";
  }
  protected:
  explicit AllAccountsSavingDocumentReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bank_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccsFieldNumber = 1,
  };
  // repeated .bank.AccountMsg accs = 1;
  int accs_size() const;
  private:
  int _internal_accs_size() const;
  public:
  void clear_accs();
  ::bank::AccountMsg* mutable_accs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bank::AccountMsg >*
      mutable_accs();
  private:
  const ::bank::AccountMsg& _internal_accs(int index) const;
  ::bank::AccountMsg* _internal_add_accs();
  public:
  const ::bank::AccountMsg& accs(int index) const;
  ::bank::AccountMsg* add_accs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bank::AccountMsg >&
      accs() const;

  // @@protoc_insertion_point(class_scope:bank.AllAccountsSavingDocumentReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bank::AccountMsg > accs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class UserMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.UserMessage) */ {
 public:
  inline UserMessage() : UserMessage(nullptr) {}
  virtual ~UserMessage();
  explicit constexpr UserMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserMessage(const UserMessage& from);
  UserMessage(UserMessage&& from) noexcept
    : UserMessage() {
    *this = ::std::move(from);
  }

  inline UserMessage& operator=(const UserMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserMessage& operator=(UserMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UserMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserMessage* internal_default_instance() {
    return reinterpret_cast<const UserMessage*>(
               &_UserMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(UserMessage& a, UserMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UserMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserMessage* New() const final {
    return CreateMaybeMessage<UserMessage>(nullptr);
  }

  UserMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UserMessage& from);
  void MergeFrom(const UserMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.UserMessage";
  }
  protected:
  explicit UserMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bank_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgStrFieldNumber = 2,
    kTmFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string msg_str = 2;
  void clear_msg_str();
  const std::string& msg_str() const;
  void set_msg_str(const std::string& value);
  void set_msg_str(std::string&& value);
  void set_msg_str(const char* value);
  void set_msg_str(const char* value, size_t size);
  std::string* mutable_msg_str();
  std::string* release_msg_str();
  void set_allocated_msg_str(std::string* msg_str);
  private:
  const std::string& _internal_msg_str() const;
  void _internal_set_msg_str(const std::string& value);
  std::string* _internal_mutable_msg_str();
  public:

  // string tm = 3;
  void clear_tm();
  const std::string& tm() const;
  void set_tm(const std::string& value);
  void set_tm(std::string&& value);
  void set_tm(const char* value);
  void set_tm(const char* value, size_t size);
  std::string* mutable_tm();
  std::string* release_tm();
  void set_allocated_tm(std::string* tm);
  private:
  const std::string& _internal_tm() const;
  void _internal_set_tm(const std::string& value);
  std::string* _internal_mutable_tm();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bank.UserMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_str_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tm_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class ShowMessageReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.ShowMessageReply) */ {
 public:
  inline ShowMessageReply() : ShowMessageReply(nullptr) {}
  virtual ~ShowMessageReply();
  explicit constexpr ShowMessageReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShowMessageReply(const ShowMessageReply& from);
  ShowMessageReply(ShowMessageReply&& from) noexcept
    : ShowMessageReply() {
    *this = ::std::move(from);
  }

  inline ShowMessageReply& operator=(const ShowMessageReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShowMessageReply& operator=(ShowMessageReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShowMessageReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShowMessageReply* internal_default_instance() {
    return reinterpret_cast<const ShowMessageReply*>(
               &_ShowMessageReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ShowMessageReply& a, ShowMessageReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ShowMessageReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShowMessageReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShowMessageReply* New() const final {
    return CreateMaybeMessage<ShowMessageReply>(nullptr);
  }

  ShowMessageReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShowMessageReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShowMessageReply& from);
  void MergeFrom(const ShowMessageReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowMessageReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.ShowMessageReply";
  }
  protected:
  explicit ShowMessageReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bank_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgsFieldNumber = 1,
  };
  // repeated .bank.UserMessage msgs = 1;
  int msgs_size() const;
  private:
  int _internal_msgs_size() const;
  public:
  void clear_msgs();
  ::bank::UserMessage* mutable_msgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bank::UserMessage >*
      mutable_msgs();
  private:
  const ::bank::UserMessage& _internal_msgs(int index) const;
  ::bank::UserMessage* _internal_add_msgs();
  public:
  const ::bank::UserMessage& msgs(int index) const;
  ::bank::UserMessage* add_msgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bank::UserMessage >&
      msgs() const;

  // @@protoc_insertion_point(class_scope:bank.ShowMessageReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bank::UserMessage > msgs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// -------------------------------------------------------------------

class LeaveMessageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bank.LeaveMessageRequest) */ {
 public:
  inline LeaveMessageRequest() : LeaveMessageRequest(nullptr) {}
  virtual ~LeaveMessageRequest();
  explicit constexpr LeaveMessageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LeaveMessageRequest(const LeaveMessageRequest& from);
  LeaveMessageRequest(LeaveMessageRequest&& from) noexcept
    : LeaveMessageRequest() {
    *this = ::std::move(from);
  }

  inline LeaveMessageRequest& operator=(const LeaveMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaveMessageRequest& operator=(LeaveMessageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaveMessageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeaveMessageRequest* internal_default_instance() {
    return reinterpret_cast<const LeaveMessageRequest*>(
               &_LeaveMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(LeaveMessageRequest& a, LeaveMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaveMessageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaveMessageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaveMessageRequest* New() const final {
    return CreateMaybeMessage<LeaveMessageRequest>(nullptr);
  }

  LeaveMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaveMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaveMessageRequest& from);
  void MergeFrom(const LeaveMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaveMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bank.LeaveMessageRequest";
  }
  protected:
  explicit LeaveMessageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_bank_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kToFieldNumber = 2,
  };
  // .bank.UserMessage msg = 1;
  bool has_msg() const;
  private:
  bool _internal_has_msg() const;
  public:
  void clear_msg();
  const ::bank::UserMessage& msg() const;
  ::bank::UserMessage* release_msg();
  ::bank::UserMessage* mutable_msg();
  void set_allocated_msg(::bank::UserMessage* msg);
  private:
  const ::bank::UserMessage& _internal_msg() const;
  ::bank::UserMessage* _internal_mutable_msg();
  public:
  void unsafe_arena_set_allocated_msg(
      ::bank::UserMessage* msg);
  ::bank::UserMessage* unsafe_arena_release_msg();

  // int32 to = 2;
  void clear_to();
  ::PROTOBUF_NAMESPACE_ID::int32 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_to() const;
  void _internal_set_to(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:bank.LeaveMessageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::bank::UserMessage* msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bank_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SaveBalance

// .bank.TypeOfSavings type = 1;
inline void SaveBalance::clear_type() {
  type_ = 0;
}
inline ::bank::TypeOfSavings SaveBalance::_internal_type() const {
  return static_cast< ::bank::TypeOfSavings >(type_);
}
inline ::bank::TypeOfSavings SaveBalance::type() const {
  // @@protoc_insertion_point(field_get:bank.SaveBalance.type)
  return _internal_type();
}
inline void SaveBalance::_internal_set_type(::bank::TypeOfSavings value) {
  
  type_ = value;
}
inline void SaveBalance::set_type(::bank::TypeOfSavings value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:bank.SaveBalance.type)
}

// double balance = 2;
inline void SaveBalance::clear_balance() {
  balance_ = 0;
}
inline double SaveBalance::_internal_balance() const {
  return balance_;
}
inline double SaveBalance::balance() const {
  // @@protoc_insertion_point(field_get:bank.SaveBalance.balance)
  return _internal_balance();
}
inline void SaveBalance::_internal_set_balance(double value) {
  
  balance_ = value;
}
inline void SaveBalance::set_balance(double value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:bank.SaveBalance.balance)
}

// string tm = 3;
inline void SaveBalance::clear_tm() {
  tm_.ClearToEmpty();
}
inline const std::string& SaveBalance::tm() const {
  // @@protoc_insertion_point(field_get:bank.SaveBalance.tm)
  return _internal_tm();
}
inline void SaveBalance::set_tm(const std::string& value) {
  _internal_set_tm(value);
  // @@protoc_insertion_point(field_set:bank.SaveBalance.tm)
}
inline std::string* SaveBalance::mutable_tm() {
  // @@protoc_insertion_point(field_mutable:bank.SaveBalance.tm)
  return _internal_mutable_tm();
}
inline const std::string& SaveBalance::_internal_tm() const {
  return tm_.Get();
}
inline void SaveBalance::_internal_set_tm(const std::string& value) {
  
  tm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SaveBalance::set_tm(std::string&& value) {
  
  tm_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bank.SaveBalance.tm)
}
inline void SaveBalance::set_tm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bank.SaveBalance.tm)
}
inline void SaveBalance::set_tm(const char* value,
    size_t size) {
  
  tm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bank.SaveBalance.tm)
}
inline std::string* SaveBalance::_internal_mutable_tm() {
  
  return tm_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SaveBalance::release_tm() {
  // @@protoc_insertion_point(field_release:bank.SaveBalance.tm)
  return tm_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SaveBalance::set_allocated_tm(std::string* tm) {
  if (tm != nullptr) {
    
  } else {
    
  }
  tm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tm,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bank.SaveBalance.tm)
}

// -------------------------------------------------------------------

// AccountMsg

// int32 id = 1;
inline void AccountMsg::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountMsg::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountMsg::id() const {
  // @@protoc_insertion_point(field_get:bank.AccountMsg.id)
  return _internal_id();
}
inline void AccountMsg::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void AccountMsg::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bank.AccountMsg.id)
}

// string name = 2;
inline void AccountMsg::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& AccountMsg::name() const {
  // @@protoc_insertion_point(field_get:bank.AccountMsg.name)
  return _internal_name();
}
inline void AccountMsg::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bank.AccountMsg.name)
}
inline std::string* AccountMsg::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bank.AccountMsg.name)
  return _internal_mutable_name();
}
inline const std::string& AccountMsg::_internal_name() const {
  return name_.Get();
}
inline void AccountMsg::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AccountMsg::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bank.AccountMsg.name)
}
inline void AccountMsg::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bank.AccountMsg.name)
}
inline void AccountMsg::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bank.AccountMsg.name)
}
inline std::string* AccountMsg::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AccountMsg::release_name() {
  // @@protoc_insertion_point(field_release:bank.AccountMsg.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountMsg::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bank.AccountMsg.name)
}

// int32 type = 3;
inline void AccountMsg::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountMsg::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountMsg::type() const {
  // @@protoc_insertion_point(field_get:bank.AccountMsg.type)
  return _internal_type();
}
inline void AccountMsg::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void AccountMsg::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:bank.AccountMsg.type)
}

// double demand_balance = 4;
inline void AccountMsg::clear_demand_balance() {
  demand_balance_ = 0;
}
inline double AccountMsg::_internal_demand_balance() const {
  return demand_balance_;
}
inline double AccountMsg::demand_balance() const {
  // @@protoc_insertion_point(field_get:bank.AccountMsg.demand_balance)
  return _internal_demand_balance();
}
inline void AccountMsg::_internal_set_demand_balance(double value) {
  
  demand_balance_ = value;
}
inline void AccountMsg::set_demand_balance(double value) {
  _internal_set_demand_balance(value);
  // @@protoc_insertion_point(field_set:bank.AccountMsg.demand_balance)
}

// string password = 5;
inline void AccountMsg::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& AccountMsg::password() const {
  // @@protoc_insertion_point(field_get:bank.AccountMsg.password)
  return _internal_password();
}
inline void AccountMsg::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:bank.AccountMsg.password)
}
inline std::string* AccountMsg::mutable_password() {
  // @@protoc_insertion_point(field_mutable:bank.AccountMsg.password)
  return _internal_mutable_password();
}
inline const std::string& AccountMsg::_internal_password() const {
  return password_.Get();
}
inline void AccountMsg::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AccountMsg::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bank.AccountMsg.password)
}
inline void AccountMsg::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bank.AccountMsg.password)
}
inline void AccountMsg::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bank.AccountMsg.password)
}
inline std::string* AccountMsg::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AccountMsg::release_password() {
  // @@protoc_insertion_point(field_release:bank.AccountMsg.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AccountMsg::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bank.AccountMsg.password)
}

// int32 locked = 6;
inline void AccountMsg::clear_locked() {
  locked_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountMsg::_internal_locked() const {
  return locked_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AccountMsg::locked() const {
  // @@protoc_insertion_point(field_get:bank.AccountMsg.locked)
  return _internal_locked();
}
inline void AccountMsg::_internal_set_locked(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  locked_ = value;
}
inline void AccountMsg::set_locked(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_locked(value);
  // @@protoc_insertion_point(field_set:bank.AccountMsg.locked)
}

// double loan = 7;
inline void AccountMsg::clear_loan() {
  loan_ = 0;
}
inline double AccountMsg::_internal_loan() const {
  return loan_;
}
inline double AccountMsg::loan() const {
  // @@protoc_insertion_point(field_get:bank.AccountMsg.loan)
  return _internal_loan();
}
inline void AccountMsg::_internal_set_loan(double value) {
  
  loan_ = value;
}
inline void AccountMsg::set_loan(double value) {
  _internal_set_loan(value);
  // @@protoc_insertion_point(field_set:bank.AccountMsg.loan)
}

// double auto_payment = 8;
inline void AccountMsg::clear_auto_payment() {
  auto_payment_ = 0;
}
inline double AccountMsg::_internal_auto_payment() const {
  return auto_payment_;
}
inline double AccountMsg::auto_payment() const {
  // @@protoc_insertion_point(field_get:bank.AccountMsg.auto_payment)
  return _internal_auto_payment();
}
inline void AccountMsg::_internal_set_auto_payment(double value) {
  
  auto_payment_ = value;
}
inline void AccountMsg::set_auto_payment(double value) {
  _internal_set_auto_payment(value);
  // @@protoc_insertion_point(field_set:bank.AccountMsg.auto_payment)
}

// repeated .bank.SaveBalance balances = 9;
inline int AccountMsg::_internal_balances_size() const {
  return balances_.size();
}
inline int AccountMsg::balances_size() const {
  return _internal_balances_size();
}
inline void AccountMsg::clear_balances() {
  balances_.Clear();
}
inline ::bank::SaveBalance* AccountMsg::mutable_balances(int index) {
  // @@protoc_insertion_point(field_mutable:bank.AccountMsg.balances)
  return balances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bank::SaveBalance >*
AccountMsg::mutable_balances() {
  // @@protoc_insertion_point(field_mutable_list:bank.AccountMsg.balances)
  return &balances_;
}
inline const ::bank::SaveBalance& AccountMsg::_internal_balances(int index) const {
  return balances_.Get(index);
}
inline const ::bank::SaveBalance& AccountMsg::balances(int index) const {
  // @@protoc_insertion_point(field_get:bank.AccountMsg.balances)
  return _internal_balances(index);
}
inline ::bank::SaveBalance* AccountMsg::_internal_add_balances() {
  return balances_.Add();
}
inline ::bank::SaveBalance* AccountMsg::add_balances() {
  // @@protoc_insertion_point(field_add:bank.AccountMsg.balances)
  return _internal_add_balances();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bank::SaveBalance >&
AccountMsg::balances() const {
  // @@protoc_insertion_point(field_list:bank.AccountMsg.balances)
  return balances_;
}

// -------------------------------------------------------------------

// CheckMessageReply

// int32 msg_size = 1;
inline void CheckMessageReply::clear_msg_size() {
  msg_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CheckMessageReply::_internal_msg_size() const {
  return msg_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CheckMessageReply::msg_size() const {
  // @@protoc_insertion_point(field_get:bank.CheckMessageReply.msg_size)
  return _internal_msg_size();
}
inline void CheckMessageReply::_internal_set_msg_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_size_ = value;
}
inline void CheckMessageReply::set_msg_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_size(value);
  // @@protoc_insertion_point(field_set:bank.CheckMessageReply.msg_size)
}

// -------------------------------------------------------------------

// HelloRequest

// string name = 1;
inline void HelloRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& HelloRequest::name() const {
  // @@protoc_insertion_point(field_get:bank.HelloRequest.name)
  return _internal_name();
}
inline void HelloRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bank.HelloRequest.name)
}
inline std::string* HelloRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bank.HelloRequest.name)
  return _internal_mutable_name();
}
inline const std::string& HelloRequest::_internal_name() const {
  return name_.Get();
}
inline void HelloRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HelloRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bank.HelloRequest.name)
}
inline void HelloRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bank.HelloRequest.name)
}
inline void HelloRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bank.HelloRequest.name)
}
inline std::string* HelloRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HelloRequest::release_name() {
  // @@protoc_insertion_point(field_release:bank.HelloRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HelloRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bank.HelloRequest.name)
}

// -------------------------------------------------------------------

// HelloReply

// string message = 1;
inline void HelloReply::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& HelloReply::message() const {
  // @@protoc_insertion_point(field_get:bank.HelloReply.message)
  return _internal_message();
}
inline void HelloReply::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:bank.HelloReply.message)
}
inline std::string* HelloReply::mutable_message() {
  // @@protoc_insertion_point(field_mutable:bank.HelloReply.message)
  return _internal_mutable_message();
}
inline const std::string& HelloReply::_internal_message() const {
  return message_.Get();
}
inline void HelloReply::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void HelloReply::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bank.HelloReply.message)
}
inline void HelloReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bank.HelloReply.message)
}
inline void HelloReply::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bank.HelloReply.message)
}
inline std::string* HelloReply::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* HelloReply::release_message() {
  // @@protoc_insertion_point(field_release:bank.HelloReply.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HelloReply::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bank.HelloReply.message)
}

// -------------------------------------------------------------------

// EmptyRequest

// -------------------------------------------------------------------

// EmptyReply

// -------------------------------------------------------------------

// LockedReply

// int32 locked = 1;
inline void LockedReply::clear_locked() {
  locked_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LockedReply::_internal_locked() const {
  return locked_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LockedReply::locked() const {
  // @@protoc_insertion_point(field_get:bank.LockedReply.locked)
  return _internal_locked();
}
inline void LockedReply::_internal_set_locked(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  locked_ = value;
}
inline void LockedReply::set_locked(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_locked(value);
  // @@protoc_insertion_point(field_set:bank.LockedReply.locked)
}

// -------------------------------------------------------------------

// SelectRequest

// int32 sure = 1;
inline void SelectRequest::clear_sure() {
  sure_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectRequest::_internal_sure() const {
  return sure_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectRequest::sure() const {
  // @@protoc_insertion_point(field_get:bank.SelectRequest.sure)
  return _internal_sure();
}
inline void SelectRequest::_internal_set_sure(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sure_ = value;
}
inline void SelectRequest::set_sure(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sure(value);
  // @@protoc_insertion_point(field_set:bank.SelectRequest.sure)
}

// int32 id = 2;
inline void SelectRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SelectRequest::id() const {
  // @@protoc_insertion_point(field_get:bank.SelectRequest.id)
  return _internal_id();
}
inline void SelectRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void SelectRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bank.SelectRequest.id)
}

// -------------------------------------------------------------------

// SimpleRequest

// int32 id = 1;
inline void SimpleRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimpleRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SimpleRequest::id() const {
  // @@protoc_insertion_point(field_get:bank.SimpleRequest.id)
  return _internal_id();
}
inline void SimpleRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void SimpleRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bank.SimpleRequest.id)
}

// -------------------------------------------------------------------

// SimpleReply

// .bank.BankError code = 1;
inline void SimpleReply::clear_code() {
  code_ = 0;
}
inline ::bank::BankError SimpleReply::_internal_code() const {
  return static_cast< ::bank::BankError >(code_);
}
inline ::bank::BankError SimpleReply::code() const {
  // @@protoc_insertion_point(field_get:bank.SimpleReply.code)
  return _internal_code();
}
inline void SimpleReply::_internal_set_code(::bank::BankError value) {
  
  code_ = value;
}
inline void SimpleReply::set_code(::bank::BankError value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:bank.SimpleReply.code)
}

// -------------------------------------------------------------------

// CreateAccountRequest

// string name = 1;
inline void CreateAccountRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CreateAccountRequest::name() const {
  // @@protoc_insertion_point(field_get:bank.CreateAccountRequest.name)
  return _internal_name();
}
inline void CreateAccountRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bank.CreateAccountRequest.name)
}
inline std::string* CreateAccountRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bank.CreateAccountRequest.name)
  return _internal_mutable_name();
}
inline const std::string& CreateAccountRequest::_internal_name() const {
  return name_.Get();
}
inline void CreateAccountRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateAccountRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bank.CreateAccountRequest.name)
}
inline void CreateAccountRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bank.CreateAccountRequest.name)
}
inline void CreateAccountRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bank.CreateAccountRequest.name)
}
inline std::string* CreateAccountRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateAccountRequest::release_name() {
  // @@protoc_insertion_point(field_release:bank.CreateAccountRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateAccountRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bank.CreateAccountRequest.name)
}

// string pswd = 2;
inline void CreateAccountRequest::clear_pswd() {
  pswd_.ClearToEmpty();
}
inline const std::string& CreateAccountRequest::pswd() const {
  // @@protoc_insertion_point(field_get:bank.CreateAccountRequest.pswd)
  return _internal_pswd();
}
inline void CreateAccountRequest::set_pswd(const std::string& value) {
  _internal_set_pswd(value);
  // @@protoc_insertion_point(field_set:bank.CreateAccountRequest.pswd)
}
inline std::string* CreateAccountRequest::mutable_pswd() {
  // @@protoc_insertion_point(field_mutable:bank.CreateAccountRequest.pswd)
  return _internal_mutable_pswd();
}
inline const std::string& CreateAccountRequest::_internal_pswd() const {
  return pswd_.Get();
}
inline void CreateAccountRequest::_internal_set_pswd(const std::string& value) {
  
  pswd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CreateAccountRequest::set_pswd(std::string&& value) {
  
  pswd_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bank.CreateAccountRequest.pswd)
}
inline void CreateAccountRequest::set_pswd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pswd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bank.CreateAccountRequest.pswd)
}
inline void CreateAccountRequest::set_pswd(const char* value,
    size_t size) {
  
  pswd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bank.CreateAccountRequest.pswd)
}
inline std::string* CreateAccountRequest::_internal_mutable_pswd() {
  
  return pswd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CreateAccountRequest::release_pswd() {
  // @@protoc_insertion_point(field_release:bank.CreateAccountRequest.pswd)
  return pswd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CreateAccountRequest::set_allocated_pswd(std::string* pswd) {
  if (pswd != nullptr) {
    
  } else {
    
  }
  pswd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pswd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bank.CreateAccountRequest.pswd)
}

// int32 type = 3;
inline void CreateAccountRequest::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateAccountRequest::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateAccountRequest::type() const {
  // @@protoc_insertion_point(field_get:bank.CreateAccountRequest.type)
  return _internal_type();
}
inline void CreateAccountRequest::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void CreateAccountRequest::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:bank.CreateAccountRequest.type)
}

// double balance = 4;
inline void CreateAccountRequest::clear_balance() {
  balance_ = 0;
}
inline double CreateAccountRequest::_internal_balance() const {
  return balance_;
}
inline double CreateAccountRequest::balance() const {
  // @@protoc_insertion_point(field_get:bank.CreateAccountRequest.balance)
  return _internal_balance();
}
inline void CreateAccountRequest::_internal_set_balance(double value) {
  
  balance_ = value;
}
inline void CreateAccountRequest::set_balance(double value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:bank.CreateAccountRequest.balance)
}

// -------------------------------------------------------------------

// CreateAccountReply

// .bank.BankError code = 1;
inline void CreateAccountReply::clear_code() {
  code_ = 0;
}
inline ::bank::BankError CreateAccountReply::_internal_code() const {
  return static_cast< ::bank::BankError >(code_);
}
inline ::bank::BankError CreateAccountReply::code() const {
  // @@protoc_insertion_point(field_get:bank.CreateAccountReply.code)
  return _internal_code();
}
inline void CreateAccountReply::_internal_set_code(::bank::BankError value) {
  
  code_ = value;
}
inline void CreateAccountReply::set_code(::bank::BankError value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:bank.CreateAccountReply.code)
}

// int32 id = 2;
inline void CreateAccountReply::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateAccountReply::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CreateAccountReply::id() const {
  // @@protoc_insertion_point(field_get:bank.CreateAccountReply.id)
  return _internal_id();
}
inline void CreateAccountReply::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void CreateAccountReply::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bank.CreateAccountReply.id)
}

// -------------------------------------------------------------------

// LoginRequest

// int32 id = 1;
inline void LoginRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginRequest::id() const {
  // @@protoc_insertion_point(field_get:bank.LoginRequest.id)
  return _internal_id();
}
inline void LoginRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void LoginRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bank.LoginRequest.id)
}

// string pswd = 2;
inline void LoginRequest::clear_pswd() {
  pswd_.ClearToEmpty();
}
inline const std::string& LoginRequest::pswd() const {
  // @@protoc_insertion_point(field_get:bank.LoginRequest.pswd)
  return _internal_pswd();
}
inline void LoginRequest::set_pswd(const std::string& value) {
  _internal_set_pswd(value);
  // @@protoc_insertion_point(field_set:bank.LoginRequest.pswd)
}
inline std::string* LoginRequest::mutable_pswd() {
  // @@protoc_insertion_point(field_mutable:bank.LoginRequest.pswd)
  return _internal_mutable_pswd();
}
inline const std::string& LoginRequest::_internal_pswd() const {
  return pswd_.Get();
}
inline void LoginRequest::_internal_set_pswd(const std::string& value) {
  
  pswd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoginRequest::set_pswd(std::string&& value) {
  
  pswd_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bank.LoginRequest.pswd)
}
inline void LoginRequest::set_pswd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pswd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bank.LoginRequest.pswd)
}
inline void LoginRequest::set_pswd(const char* value,
    size_t size) {
  
  pswd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bank.LoginRequest.pswd)
}
inline std::string* LoginRequest::_internal_mutable_pswd() {
  
  return pswd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoginRequest::release_pswd() {
  // @@protoc_insertion_point(field_release:bank.LoginRequest.pswd)
  return pswd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginRequest::set_allocated_pswd(std::string* pswd) {
  if (pswd != nullptr) {
    
  } else {
    
  }
  pswd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pswd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bank.LoginRequest.pswd)
}

// -------------------------------------------------------------------

// LoginReply

// .bank.BankError code = 1;
inline void LoginReply::clear_code() {
  code_ = 0;
}
inline ::bank::BankError LoginReply::_internal_code() const {
  return static_cast< ::bank::BankError >(code_);
}
inline ::bank::BankError LoginReply::code() const {
  // @@protoc_insertion_point(field_get:bank.LoginReply.code)
  return _internal_code();
}
inline void LoginReply::_internal_set_code(::bank::BankError value) {
  
  code_ = value;
}
inline void LoginReply::set_code(::bank::BankError value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:bank.LoginReply.code)
}

// string name = 2;
inline void LoginReply::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& LoginReply::name() const {
  // @@protoc_insertion_point(field_get:bank.LoginReply.name)
  return _internal_name();
}
inline void LoginReply::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bank.LoginReply.name)
}
inline std::string* LoginReply::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bank.LoginReply.name)
  return _internal_mutable_name();
}
inline const std::string& LoginReply::_internal_name() const {
  return name_.Get();
}
inline void LoginReply::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LoginReply::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bank.LoginReply.name)
}
inline void LoginReply::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bank.LoginReply.name)
}
inline void LoginReply::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bank.LoginReply.name)
}
inline std::string* LoginReply::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LoginReply::release_name() {
  // @@protoc_insertion_point(field_release:bank.LoginReply.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LoginReply::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bank.LoginReply.name)
}

// int32 locked = 3;
inline void LoginReply::clear_locked() {
  locked_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginReply::_internal_locked() const {
  return locked_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LoginReply::locked() const {
  // @@protoc_insertion_point(field_get:bank.LoginReply.locked)
  return _internal_locked();
}
inline void LoginReply::_internal_set_locked(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  locked_ = value;
}
inline void LoginReply::set_locked(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_locked(value);
  // @@protoc_insertion_point(field_set:bank.LoginReply.locked)
}

// -------------------------------------------------------------------

// UserDemandRequest

// int32 id = 1;
inline void UserDemandRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserDemandRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserDemandRequest::id() const {
  // @@protoc_insertion_point(field_get:bank.UserDemandRequest.id)
  return _internal_id();
}
inline void UserDemandRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void UserDemandRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bank.UserDemandRequest.id)
}

// double amount = 2;
inline void UserDemandRequest::clear_amount() {
  amount_ = 0;
}
inline double UserDemandRequest::_internal_amount() const {
  return amount_;
}
inline double UserDemandRequest::amount() const {
  // @@protoc_insertion_point(field_get:bank.UserDemandRequest.amount)
  return _internal_amount();
}
inline void UserDemandRequest::_internal_set_amount(double value) {
  
  amount_ = value;
}
inline void UserDemandRequest::set_amount(double value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:bank.UserDemandRequest.amount)
}

// -------------------------------------------------------------------

// UserSavingDepositRequest

// int32 id = 1;
inline void UserSavingDepositRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserSavingDepositRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserSavingDepositRequest::id() const {
  // @@protoc_insertion_point(field_get:bank.UserSavingDepositRequest.id)
  return _internal_id();
}
inline void UserSavingDepositRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void UserSavingDepositRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bank.UserSavingDepositRequest.id)
}

// double amount = 2;
inline void UserSavingDepositRequest::clear_amount() {
  amount_ = 0;
}
inline double UserSavingDepositRequest::_internal_amount() const {
  return amount_;
}
inline double UserSavingDepositRequest::amount() const {
  // @@protoc_insertion_point(field_get:bank.UserSavingDepositRequest.amount)
  return _internal_amount();
}
inline void UserSavingDepositRequest::_internal_set_amount(double value) {
  
  amount_ = value;
}
inline void UserSavingDepositRequest::set_amount(double value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:bank.UserSavingDepositRequest.amount)
}

// .bank.TypeOfSavings type = 3;
inline void UserSavingDepositRequest::clear_type() {
  type_ = 0;
}
inline ::bank::TypeOfSavings UserSavingDepositRequest::_internal_type() const {
  return static_cast< ::bank::TypeOfSavings >(type_);
}
inline ::bank::TypeOfSavings UserSavingDepositRequest::type() const {
  // @@protoc_insertion_point(field_get:bank.UserSavingDepositRequest.type)
  return _internal_type();
}
inline void UserSavingDepositRequest::_internal_set_type(::bank::TypeOfSavings value) {
  
  type_ = value;
}
inline void UserSavingDepositRequest::set_type(::bank::TypeOfSavings value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:bank.UserSavingDepositRequest.type)
}

// -------------------------------------------------------------------

// ShowAccountReply

// .bank.AccountMsg acc = 1;
inline bool ShowAccountReply::_internal_has_acc() const {
  return this != internal_default_instance() && acc_ != nullptr;
}
inline bool ShowAccountReply::has_acc() const {
  return _internal_has_acc();
}
inline void ShowAccountReply::clear_acc() {
  if (GetArena() == nullptr && acc_ != nullptr) {
    delete acc_;
  }
  acc_ = nullptr;
}
inline const ::bank::AccountMsg& ShowAccountReply::_internal_acc() const {
  const ::bank::AccountMsg* p = acc_;
  return p != nullptr ? *p : reinterpret_cast<const ::bank::AccountMsg&>(
      ::bank::_AccountMsg_default_instance_);
}
inline const ::bank::AccountMsg& ShowAccountReply::acc() const {
  // @@protoc_insertion_point(field_get:bank.ShowAccountReply.acc)
  return _internal_acc();
}
inline void ShowAccountReply::unsafe_arena_set_allocated_acc(
    ::bank::AccountMsg* acc) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acc_);
  }
  acc_ = acc;
  if (acc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bank.ShowAccountReply.acc)
}
inline ::bank::AccountMsg* ShowAccountReply::release_acc() {
  
  ::bank::AccountMsg* temp = acc_;
  acc_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bank::AccountMsg* ShowAccountReply::unsafe_arena_release_acc() {
  // @@protoc_insertion_point(field_release:bank.ShowAccountReply.acc)
  
  ::bank::AccountMsg* temp = acc_;
  acc_ = nullptr;
  return temp;
}
inline ::bank::AccountMsg* ShowAccountReply::_internal_mutable_acc() {
  
  if (acc_ == nullptr) {
    auto* p = CreateMaybeMessage<::bank::AccountMsg>(GetArena());
    acc_ = p;
  }
  return acc_;
}
inline ::bank::AccountMsg* ShowAccountReply::mutable_acc() {
  // @@protoc_insertion_point(field_mutable:bank.ShowAccountReply.acc)
  return _internal_mutable_acc();
}
inline void ShowAccountReply::set_allocated_acc(::bank::AccountMsg* acc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete acc_;
  }
  if (acc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(acc);
    if (message_arena != submessage_arena) {
      acc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acc, submessage_arena);
    }
    
  } else {
    
  }
  acc_ = acc;
  // @@protoc_insertion_point(field_set_allocated:bank.ShowAccountReply.acc)
}

// -------------------------------------------------------------------

// UserSavingWithdrawRequest

// int32 id = 1;
inline void UserSavingWithdrawRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserSavingWithdrawRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserSavingWithdrawRequest::id() const {
  // @@protoc_insertion_point(field_get:bank.UserSavingWithdrawRequest.id)
  return _internal_id();
}
inline void UserSavingWithdrawRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void UserSavingWithdrawRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bank.UserSavingWithdrawRequest.id)
}

// int32 serial = 2;
inline void UserSavingWithdrawRequest::clear_serial() {
  serial_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserSavingWithdrawRequest::_internal_serial() const {
  return serial_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserSavingWithdrawRequest::serial() const {
  // @@protoc_insertion_point(field_get:bank.UserSavingWithdrawRequest.serial)
  return _internal_serial();
}
inline void UserSavingWithdrawRequest::_internal_set_serial(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serial_ = value;
}
inline void UserSavingWithdrawRequest::set_serial(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serial(value);
  // @@protoc_insertion_point(field_set:bank.UserSavingWithdrawRequest.serial)
}

// -------------------------------------------------------------------

// ChangePasswordRequest

// int32 id = 1;
inline void ChangePasswordRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChangePasswordRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ChangePasswordRequest::id() const {
  // @@protoc_insertion_point(field_get:bank.ChangePasswordRequest.id)
  return _internal_id();
}
inline void ChangePasswordRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ChangePasswordRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bank.ChangePasswordRequest.id)
}

// string password = 2;
inline void ChangePasswordRequest::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& ChangePasswordRequest::password() const {
  // @@protoc_insertion_point(field_get:bank.ChangePasswordRequest.password)
  return _internal_password();
}
inline void ChangePasswordRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:bank.ChangePasswordRequest.password)
}
inline std::string* ChangePasswordRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:bank.ChangePasswordRequest.password)
  return _internal_mutable_password();
}
inline const std::string& ChangePasswordRequest::_internal_password() const {
  return password_.Get();
}
inline void ChangePasswordRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChangePasswordRequest::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bank.ChangePasswordRequest.password)
}
inline void ChangePasswordRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bank.ChangePasswordRequest.password)
}
inline void ChangePasswordRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bank.ChangePasswordRequest.password)
}
inline std::string* ChangePasswordRequest::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChangePasswordRequest::release_password() {
  // @@protoc_insertion_point(field_release:bank.ChangePasswordRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChangePasswordRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bank.ChangePasswordRequest.password)
}

// -------------------------------------------------------------------

// ChangeManagerRequest

// string name = 1;
inline void ChangeManagerRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ChangeManagerRequest::name() const {
  // @@protoc_insertion_point(field_get:bank.ChangeManagerRequest.name)
  return _internal_name();
}
inline void ChangeManagerRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:bank.ChangeManagerRequest.name)
}
inline std::string* ChangeManagerRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:bank.ChangeManagerRequest.name)
  return _internal_mutable_name();
}
inline const std::string& ChangeManagerRequest::_internal_name() const {
  return name_.Get();
}
inline void ChangeManagerRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChangeManagerRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bank.ChangeManagerRequest.name)
}
inline void ChangeManagerRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bank.ChangeManagerRequest.name)
}
inline void ChangeManagerRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bank.ChangeManagerRequest.name)
}
inline std::string* ChangeManagerRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChangeManagerRequest::release_name() {
  // @@protoc_insertion_point(field_release:bank.ChangeManagerRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChangeManagerRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bank.ChangeManagerRequest.name)
}

// string pswd = 2;
inline void ChangeManagerRequest::clear_pswd() {
  pswd_.ClearToEmpty();
}
inline const std::string& ChangeManagerRequest::pswd() const {
  // @@protoc_insertion_point(field_get:bank.ChangeManagerRequest.pswd)
  return _internal_pswd();
}
inline void ChangeManagerRequest::set_pswd(const std::string& value) {
  _internal_set_pswd(value);
  // @@protoc_insertion_point(field_set:bank.ChangeManagerRequest.pswd)
}
inline std::string* ChangeManagerRequest::mutable_pswd() {
  // @@protoc_insertion_point(field_mutable:bank.ChangeManagerRequest.pswd)
  return _internal_mutable_pswd();
}
inline const std::string& ChangeManagerRequest::_internal_pswd() const {
  return pswd_.Get();
}
inline void ChangeManagerRequest::_internal_set_pswd(const std::string& value) {
  
  pswd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ChangeManagerRequest::set_pswd(std::string&& value) {
  
  pswd_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bank.ChangeManagerRequest.pswd)
}
inline void ChangeManagerRequest::set_pswd(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pswd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bank.ChangeManagerRequest.pswd)
}
inline void ChangeManagerRequest::set_pswd(const char* value,
    size_t size) {
  
  pswd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bank.ChangeManagerRequest.pswd)
}
inline std::string* ChangeManagerRequest::_internal_mutable_pswd() {
  
  return pswd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ChangeManagerRequest::release_pswd() {
  // @@protoc_insertion_point(field_release:bank.ChangeManagerRequest.pswd)
  return pswd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ChangeManagerRequest::set_allocated_pswd(std::string* pswd) {
  if (pswd != nullptr) {
    
  } else {
    
  }
  pswd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pswd,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bank.ChangeManagerRequest.pswd)
}

// -------------------------------------------------------------------

// UserTransferRequest

// int32 original_id = 1;
inline void UserTransferRequest::clear_original_id() {
  original_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserTransferRequest::_internal_original_id() const {
  return original_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserTransferRequest::original_id() const {
  // @@protoc_insertion_point(field_get:bank.UserTransferRequest.original_id)
  return _internal_original_id();
}
inline void UserTransferRequest::_internal_set_original_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  original_id_ = value;
}
inline void UserTransferRequest::set_original_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_original_id(value);
  // @@protoc_insertion_point(field_set:bank.UserTransferRequest.original_id)
}

// int32 transfer_id = 2;
inline void UserTransferRequest::clear_transfer_id() {
  transfer_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserTransferRequest::_internal_transfer_id() const {
  return transfer_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserTransferRequest::transfer_id() const {
  // @@protoc_insertion_point(field_get:bank.UserTransferRequest.transfer_id)
  return _internal_transfer_id();
}
inline void UserTransferRequest::_internal_set_transfer_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  transfer_id_ = value;
}
inline void UserTransferRequest::set_transfer_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_transfer_id(value);
  // @@protoc_insertion_point(field_set:bank.UserTransferRequest.transfer_id)
}

// double amount = 3;
inline void UserTransferRequest::clear_amount() {
  amount_ = 0;
}
inline double UserTransferRequest::_internal_amount() const {
  return amount_;
}
inline double UserTransferRequest::amount() const {
  // @@protoc_insertion_point(field_get:bank.UserTransferRequest.amount)
  return _internal_amount();
}
inline void UserTransferRequest::_internal_set_amount(double value) {
  
  amount_ = value;
}
inline void UserTransferRequest::set_amount(double value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:bank.UserTransferRequest.amount)
}

// -------------------------------------------------------------------

// UserLoanPayRequest

// int32 id = 1;
inline void UserLoanPayRequest::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserLoanPayRequest::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserLoanPayRequest::id() const {
  // @@protoc_insertion_point(field_get:bank.UserLoanPayRequest.id)
  return _internal_id();
}
inline void UserLoanPayRequest::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void UserLoanPayRequest::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bank.UserLoanPayRequest.id)
}

// int32 n = 2;
inline void UserLoanPayRequest::clear_n() {
  n_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserLoanPayRequest::_internal_n() const {
  return n_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserLoanPayRequest::n() const {
  // @@protoc_insertion_point(field_get:bank.UserLoanPayRequest.n)
  return _internal_n();
}
inline void UserLoanPayRequest::_internal_set_n(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  n_ = value;
}
inline void UserLoanPayRequest::set_n(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_n(value);
  // @@protoc_insertion_point(field_set:bank.UserLoanPayRequest.n)
}

// double amount = 3;
inline void UserLoanPayRequest::clear_amount() {
  amount_ = 0;
}
inline double UserLoanPayRequest::_internal_amount() const {
  return amount_;
}
inline double UserLoanPayRequest::amount() const {
  // @@protoc_insertion_point(field_get:bank.UserLoanPayRequest.amount)
  return _internal_amount();
}
inline void UserLoanPayRequest::_internal_set_amount(double value) {
  
  amount_ = value;
}
inline void UserLoanPayRequest::set_amount(double value) {
  _internal_set_amount(value);
  // @@protoc_insertion_point(field_set:bank.UserLoanPayRequest.amount)
}

// -------------------------------------------------------------------

// AllAccountsBasicStatusReply

// repeated .bank.AccountMsg accs = 1;
inline int AllAccountsBasicStatusReply::_internal_accs_size() const {
  return accs_.size();
}
inline int AllAccountsBasicStatusReply::accs_size() const {
  return _internal_accs_size();
}
inline void AllAccountsBasicStatusReply::clear_accs() {
  accs_.Clear();
}
inline ::bank::AccountMsg* AllAccountsBasicStatusReply::mutable_accs(int index) {
  // @@protoc_insertion_point(field_mutable:bank.AllAccountsBasicStatusReply.accs)
  return accs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bank::AccountMsg >*
AllAccountsBasicStatusReply::mutable_accs() {
  // @@protoc_insertion_point(field_mutable_list:bank.AllAccountsBasicStatusReply.accs)
  return &accs_;
}
inline const ::bank::AccountMsg& AllAccountsBasicStatusReply::_internal_accs(int index) const {
  return accs_.Get(index);
}
inline const ::bank::AccountMsg& AllAccountsBasicStatusReply::accs(int index) const {
  // @@protoc_insertion_point(field_get:bank.AllAccountsBasicStatusReply.accs)
  return _internal_accs(index);
}
inline ::bank::AccountMsg* AllAccountsBasicStatusReply::_internal_add_accs() {
  return accs_.Add();
}
inline ::bank::AccountMsg* AllAccountsBasicStatusReply::add_accs() {
  // @@protoc_insertion_point(field_add:bank.AllAccountsBasicStatusReply.accs)
  return _internal_add_accs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bank::AccountMsg >&
AllAccountsBasicStatusReply::accs() const {
  // @@protoc_insertion_point(field_list:bank.AllAccountsBasicStatusReply.accs)
  return accs_;
}

// -------------------------------------------------------------------

// AllAccountsSavingDocumentReply

// repeated .bank.AccountMsg accs = 1;
inline int AllAccountsSavingDocumentReply::_internal_accs_size() const {
  return accs_.size();
}
inline int AllAccountsSavingDocumentReply::accs_size() const {
  return _internal_accs_size();
}
inline void AllAccountsSavingDocumentReply::clear_accs() {
  accs_.Clear();
}
inline ::bank::AccountMsg* AllAccountsSavingDocumentReply::mutable_accs(int index) {
  // @@protoc_insertion_point(field_mutable:bank.AllAccountsSavingDocumentReply.accs)
  return accs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bank::AccountMsg >*
AllAccountsSavingDocumentReply::mutable_accs() {
  // @@protoc_insertion_point(field_mutable_list:bank.AllAccountsSavingDocumentReply.accs)
  return &accs_;
}
inline const ::bank::AccountMsg& AllAccountsSavingDocumentReply::_internal_accs(int index) const {
  return accs_.Get(index);
}
inline const ::bank::AccountMsg& AllAccountsSavingDocumentReply::accs(int index) const {
  // @@protoc_insertion_point(field_get:bank.AllAccountsSavingDocumentReply.accs)
  return _internal_accs(index);
}
inline ::bank::AccountMsg* AllAccountsSavingDocumentReply::_internal_add_accs() {
  return accs_.Add();
}
inline ::bank::AccountMsg* AllAccountsSavingDocumentReply::add_accs() {
  // @@protoc_insertion_point(field_add:bank.AllAccountsSavingDocumentReply.accs)
  return _internal_add_accs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bank::AccountMsg >&
AllAccountsSavingDocumentReply::accs() const {
  // @@protoc_insertion_point(field_list:bank.AllAccountsSavingDocumentReply.accs)
  return accs_;
}

// -------------------------------------------------------------------

// UserMessage

// int32 id = 1;
inline void UserMessage::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserMessage::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserMessage::id() const {
  // @@protoc_insertion_point(field_get:bank.UserMessage.id)
  return _internal_id();
}
inline void UserMessage::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void UserMessage::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:bank.UserMessage.id)
}

// string msg_str = 2;
inline void UserMessage::clear_msg_str() {
  msg_str_.ClearToEmpty();
}
inline const std::string& UserMessage::msg_str() const {
  // @@protoc_insertion_point(field_get:bank.UserMessage.msg_str)
  return _internal_msg_str();
}
inline void UserMessage::set_msg_str(const std::string& value) {
  _internal_set_msg_str(value);
  // @@protoc_insertion_point(field_set:bank.UserMessage.msg_str)
}
inline std::string* UserMessage::mutable_msg_str() {
  // @@protoc_insertion_point(field_mutable:bank.UserMessage.msg_str)
  return _internal_mutable_msg_str();
}
inline const std::string& UserMessage::_internal_msg_str() const {
  return msg_str_.Get();
}
inline void UserMessage::_internal_set_msg_str(const std::string& value) {
  
  msg_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserMessage::set_msg_str(std::string&& value) {
  
  msg_str_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bank.UserMessage.msg_str)
}
inline void UserMessage::set_msg_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bank.UserMessage.msg_str)
}
inline void UserMessage::set_msg_str(const char* value,
    size_t size) {
  
  msg_str_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bank.UserMessage.msg_str)
}
inline std::string* UserMessage::_internal_mutable_msg_str() {
  
  return msg_str_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserMessage::release_msg_str() {
  // @@protoc_insertion_point(field_release:bank.UserMessage.msg_str)
  return msg_str_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserMessage::set_allocated_msg_str(std::string* msg_str) {
  if (msg_str != nullptr) {
    
  } else {
    
  }
  msg_str_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_str,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bank.UserMessage.msg_str)
}

// string tm = 3;
inline void UserMessage::clear_tm() {
  tm_.ClearToEmpty();
}
inline const std::string& UserMessage::tm() const {
  // @@protoc_insertion_point(field_get:bank.UserMessage.tm)
  return _internal_tm();
}
inline void UserMessage::set_tm(const std::string& value) {
  _internal_set_tm(value);
  // @@protoc_insertion_point(field_set:bank.UserMessage.tm)
}
inline std::string* UserMessage::mutable_tm() {
  // @@protoc_insertion_point(field_mutable:bank.UserMessage.tm)
  return _internal_mutable_tm();
}
inline const std::string& UserMessage::_internal_tm() const {
  return tm_.Get();
}
inline void UserMessage::_internal_set_tm(const std::string& value) {
  
  tm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UserMessage::set_tm(std::string&& value) {
  
  tm_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:bank.UserMessage.tm)
}
inline void UserMessage::set_tm(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:bank.UserMessage.tm)
}
inline void UserMessage::set_tm(const char* value,
    size_t size) {
  
  tm_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:bank.UserMessage.tm)
}
inline std::string* UserMessage::_internal_mutable_tm() {
  
  return tm_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UserMessage::release_tm() {
  // @@protoc_insertion_point(field_release:bank.UserMessage.tm)
  return tm_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UserMessage::set_allocated_tm(std::string* tm) {
  if (tm != nullptr) {
    
  } else {
    
  }
  tm_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tm,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:bank.UserMessage.tm)
}

// -------------------------------------------------------------------

// ShowMessageReply

// repeated .bank.UserMessage msgs = 1;
inline int ShowMessageReply::_internal_msgs_size() const {
  return msgs_.size();
}
inline int ShowMessageReply::msgs_size() const {
  return _internal_msgs_size();
}
inline void ShowMessageReply::clear_msgs() {
  msgs_.Clear();
}
inline ::bank::UserMessage* ShowMessageReply::mutable_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:bank.ShowMessageReply.msgs)
  return msgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bank::UserMessage >*
ShowMessageReply::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_list:bank.ShowMessageReply.msgs)
  return &msgs_;
}
inline const ::bank::UserMessage& ShowMessageReply::_internal_msgs(int index) const {
  return msgs_.Get(index);
}
inline const ::bank::UserMessage& ShowMessageReply::msgs(int index) const {
  // @@protoc_insertion_point(field_get:bank.ShowMessageReply.msgs)
  return _internal_msgs(index);
}
inline ::bank::UserMessage* ShowMessageReply::_internal_add_msgs() {
  return msgs_.Add();
}
inline ::bank::UserMessage* ShowMessageReply::add_msgs() {
  // @@protoc_insertion_point(field_add:bank.ShowMessageReply.msgs)
  return _internal_add_msgs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::bank::UserMessage >&
ShowMessageReply::msgs() const {
  // @@protoc_insertion_point(field_list:bank.ShowMessageReply.msgs)
  return msgs_;
}

// -------------------------------------------------------------------

// LeaveMessageRequest

// .bank.UserMessage msg = 1;
inline bool LeaveMessageRequest::_internal_has_msg() const {
  return this != internal_default_instance() && msg_ != nullptr;
}
inline bool LeaveMessageRequest::has_msg() const {
  return _internal_has_msg();
}
inline void LeaveMessageRequest::clear_msg() {
  if (GetArena() == nullptr && msg_ != nullptr) {
    delete msg_;
  }
  msg_ = nullptr;
}
inline const ::bank::UserMessage& LeaveMessageRequest::_internal_msg() const {
  const ::bank::UserMessage* p = msg_;
  return p != nullptr ? *p : reinterpret_cast<const ::bank::UserMessage&>(
      ::bank::_UserMessage_default_instance_);
}
inline const ::bank::UserMessage& LeaveMessageRequest::msg() const {
  // @@protoc_insertion_point(field_get:bank.LeaveMessageRequest.msg)
  return _internal_msg();
}
inline void LeaveMessageRequest::unsafe_arena_set_allocated_msg(
    ::bank::UserMessage* msg) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg_);
  }
  msg_ = msg;
  if (msg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:bank.LeaveMessageRequest.msg)
}
inline ::bank::UserMessage* LeaveMessageRequest::release_msg() {
  
  ::bank::UserMessage* temp = msg_;
  msg_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::bank::UserMessage* LeaveMessageRequest::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_release:bank.LeaveMessageRequest.msg)
  
  ::bank::UserMessage* temp = msg_;
  msg_ = nullptr;
  return temp;
}
inline ::bank::UserMessage* LeaveMessageRequest::_internal_mutable_msg() {
  
  if (msg_ == nullptr) {
    auto* p = CreateMaybeMessage<::bank::UserMessage>(GetArena());
    msg_ = p;
  }
  return msg_;
}
inline ::bank::UserMessage* LeaveMessageRequest::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:bank.LeaveMessageRequest.msg)
  return _internal_mutable_msg();
}
inline void LeaveMessageRequest::set_allocated_msg(::bank::UserMessage* msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete msg_;
  }
  if (msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(msg);
    if (message_arena != submessage_arena) {
      msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg, submessage_arena);
    }
    
  } else {
    
  }
  msg_ = msg;
  // @@protoc_insertion_point(field_set_allocated:bank.LeaveMessageRequest.msg)
}

// int32 to = 2;
inline void LeaveMessageRequest::clear_to() {
  to_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LeaveMessageRequest::_internal_to() const {
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LeaveMessageRequest::to() const {
  // @@protoc_insertion_point(field_get:bank.LeaveMessageRequest.to)
  return _internal_to();
}
inline void LeaveMessageRequest::_internal_set_to(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  to_ = value;
}
inline void LeaveMessageRequest::set_to(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:bank.LeaveMessageRequest.to)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bank

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::bank::BankError> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bank::BankError>() {
  return ::bank::BankError_descriptor();
}
template <> struct is_proto_enum< ::bank::TypeOfAccount> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bank::TypeOfAccount>() {
  return ::bank::TypeOfAccount_descriptor();
}
template <> struct is_proto_enum< ::bank::TypeOfSavings> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bank::TypeOfSavings>() {
  return ::bank::TypeOfSavings_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bank_2eproto
