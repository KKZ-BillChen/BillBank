// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bank.proto

#include "bank.pb.h"
#include "bank.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace bank {

static const char* Greeter_method_names[] = {
  "/bank.Greeter/SayHello",
  "/bank.Greeter/CreateAccount",
  "/bank.Greeter/CloseAccount",
  "/bank.Greeter/ShowAccount",
  "/bank.Greeter/UserLogin",
  "/bank.Greeter/ManagerLogin",
  "/bank.Greeter/ChangePassword",
  "/bank.Greeter/UserDemandDeposit",
  "/bank.Greeter/UserSavingDeposit",
  "/bank.Greeter/UserDemandWithdraw",
  "/bank.Greeter/UserSavingWithdraw",
  "/bank.Greeter/UserTransfer",
  "/bank.Greeter/UserLoan",
  "/bank.Greeter/UserLoanPay",
  "/bank.Greeter/LockUser",
  "/bank.Greeter/UnlockUser",
  "/bank.Greeter/AllAccountsBasicStatus",
  "/bank.Greeter/AllAccountsSavingDocument",
  "/bank.Greeter/ChangeManager",
  "/bank.Greeter/Exit",
  "/bank.Greeter/JudgeLocked",
};

std::unique_ptr< Greeter::Stub> Greeter::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Greeter::Stub> stub(new Greeter::Stub(channel));
  return stub;
}

Greeter::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SayHello_(Greeter_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateAccount_(Greeter_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CloseAccount_(Greeter_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShowAccount_(Greeter_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UserLogin_(Greeter_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ManagerLogin_(Greeter_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangePassword_(Greeter_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UserDemandDeposit_(Greeter_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UserSavingDeposit_(Greeter_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UserDemandWithdraw_(Greeter_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UserSavingWithdraw_(Greeter_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UserTransfer_(Greeter_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UserLoan_(Greeter_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UserLoanPay_(Greeter_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_LockUser_(Greeter_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UnlockUser_(Greeter_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AllAccountsBasicStatus_(Greeter_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AllAccountsSavingDocument_(Greeter_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ChangeManager_(Greeter_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Exit_(Greeter_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_JudgeLocked_(Greeter_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Greeter::Stub::SayHello(::grpc::ClientContext* context, const ::bank::HelloRequest& request, ::bank::HelloReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bank::HelloRequest, ::bank::HelloReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SayHello_, context, request, response);
}

void Greeter::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::bank::HelloRequest* request, ::bank::HelloReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bank::HelloRequest, ::bank::HelloReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::bank::HelloRequest* request, ::bank::HelloReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bank::HelloReply>* Greeter::Stub::PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::bank::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bank::HelloReply, ::bank::HelloRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SayHello_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bank::HelloReply>* Greeter::Stub::AsyncSayHelloRaw(::grpc::ClientContext* context, const ::bank::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSayHelloRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::CreateAccount(::grpc::ClientContext* context, const ::bank::CreateAccountRequest& request, ::bank::CreateAccountReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bank::CreateAccountRequest, ::bank::CreateAccountReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateAccount_, context, request, response);
}

void Greeter::Stub::experimental_async::CreateAccount(::grpc::ClientContext* context, const ::bank::CreateAccountRequest* request, ::bank::CreateAccountReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bank::CreateAccountRequest, ::bank::CreateAccountReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAccount_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::CreateAccount(::grpc::ClientContext* context, const ::bank::CreateAccountRequest* request, ::bank::CreateAccountReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bank::CreateAccountReply>* Greeter::Stub::PrepareAsyncCreateAccountRaw(::grpc::ClientContext* context, const ::bank::CreateAccountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bank::CreateAccountReply, ::bank::CreateAccountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bank::CreateAccountReply>* Greeter::Stub::AsyncCreateAccountRaw(::grpc::ClientContext* context, const ::bank::CreateAccountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::CloseAccount(::grpc::ClientContext* context, const ::bank::SimpleRequest& request, ::bank::SimpleReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bank::SimpleRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CloseAccount_, context, request, response);
}

void Greeter::Stub::experimental_async::CloseAccount(::grpc::ClientContext* context, const ::bank::SimpleRequest* request, ::bank::SimpleReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bank::SimpleRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CloseAccount_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::CloseAccount(::grpc::ClientContext* context, const ::bank::SimpleRequest* request, ::bank::SimpleReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CloseAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bank::SimpleReply>* Greeter::Stub::PrepareAsyncCloseAccountRaw(::grpc::ClientContext* context, const ::bank::SimpleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bank::SimpleReply, ::bank::SimpleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CloseAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bank::SimpleReply>* Greeter::Stub::AsyncCloseAccountRaw(::grpc::ClientContext* context, const ::bank::SimpleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCloseAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::ShowAccount(::grpc::ClientContext* context, const ::bank::SimpleRequest& request, ::bank::ShowAccountReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bank::SimpleRequest, ::bank::ShowAccountReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ShowAccount_, context, request, response);
}

void Greeter::Stub::experimental_async::ShowAccount(::grpc::ClientContext* context, const ::bank::SimpleRequest* request, ::bank::ShowAccountReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bank::SimpleRequest, ::bank::ShowAccountReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShowAccount_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::ShowAccount(::grpc::ClientContext* context, const ::bank::SimpleRequest* request, ::bank::ShowAccountReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShowAccount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bank::ShowAccountReply>* Greeter::Stub::PrepareAsyncShowAccountRaw(::grpc::ClientContext* context, const ::bank::SimpleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bank::ShowAccountReply, ::bank::SimpleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ShowAccount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bank::ShowAccountReply>* Greeter::Stub::AsyncShowAccountRaw(::grpc::ClientContext* context, const ::bank::SimpleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShowAccountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::UserLogin(::grpc::ClientContext* context, const ::bank::LoginRequest& request, ::bank::LoginReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bank::LoginRequest, ::bank::LoginReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UserLogin_, context, request, response);
}

void Greeter::Stub::experimental_async::UserLogin(::grpc::ClientContext* context, const ::bank::LoginRequest* request, ::bank::LoginReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bank::LoginRequest, ::bank::LoginReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserLogin_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::UserLogin(::grpc::ClientContext* context, const ::bank::LoginRequest* request, ::bank::LoginReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserLogin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bank::LoginReply>* Greeter::Stub::PrepareAsyncUserLoginRaw(::grpc::ClientContext* context, const ::bank::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bank::LoginReply, ::bank::LoginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UserLogin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bank::LoginReply>* Greeter::Stub::AsyncUserLoginRaw(::grpc::ClientContext* context, const ::bank::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUserLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::ManagerLogin(::grpc::ClientContext* context, const ::bank::LoginRequest& request, ::bank::LoginReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bank::LoginRequest, ::bank::LoginReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ManagerLogin_, context, request, response);
}

void Greeter::Stub::experimental_async::ManagerLogin(::grpc::ClientContext* context, const ::bank::LoginRequest* request, ::bank::LoginReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bank::LoginRequest, ::bank::LoginReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ManagerLogin_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::ManagerLogin(::grpc::ClientContext* context, const ::bank::LoginRequest* request, ::bank::LoginReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ManagerLogin_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bank::LoginReply>* Greeter::Stub::PrepareAsyncManagerLoginRaw(::grpc::ClientContext* context, const ::bank::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bank::LoginReply, ::bank::LoginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ManagerLogin_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bank::LoginReply>* Greeter::Stub::AsyncManagerLoginRaw(::grpc::ClientContext* context, const ::bank::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncManagerLoginRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::ChangePassword(::grpc::ClientContext* context, const ::bank::ChangePasswordRequest& request, ::bank::SimpleReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bank::ChangePasswordRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ChangePassword_, context, request, response);
}

void Greeter::Stub::experimental_async::ChangePassword(::grpc::ClientContext* context, const ::bank::ChangePasswordRequest* request, ::bank::SimpleReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bank::ChangePasswordRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangePassword_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::ChangePassword(::grpc::ClientContext* context, const ::bank::ChangePasswordRequest* request, ::bank::SimpleReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangePassword_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bank::SimpleReply>* Greeter::Stub::PrepareAsyncChangePasswordRaw(::grpc::ClientContext* context, const ::bank::ChangePasswordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bank::SimpleReply, ::bank::ChangePasswordRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ChangePassword_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bank::SimpleReply>* Greeter::Stub::AsyncChangePasswordRaw(::grpc::ClientContext* context, const ::bank::ChangePasswordRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChangePasswordRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::UserDemandDeposit(::grpc::ClientContext* context, const ::bank::UserDemandRequest& request, ::bank::SimpleReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bank::UserDemandRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UserDemandDeposit_, context, request, response);
}

void Greeter::Stub::experimental_async::UserDemandDeposit(::grpc::ClientContext* context, const ::bank::UserDemandRequest* request, ::bank::SimpleReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bank::UserDemandRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserDemandDeposit_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::UserDemandDeposit(::grpc::ClientContext* context, const ::bank::UserDemandRequest* request, ::bank::SimpleReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserDemandDeposit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bank::SimpleReply>* Greeter::Stub::PrepareAsyncUserDemandDepositRaw(::grpc::ClientContext* context, const ::bank::UserDemandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bank::SimpleReply, ::bank::UserDemandRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UserDemandDeposit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bank::SimpleReply>* Greeter::Stub::AsyncUserDemandDepositRaw(::grpc::ClientContext* context, const ::bank::UserDemandRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUserDemandDepositRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::UserSavingDeposit(::grpc::ClientContext* context, const ::bank::UserSavingDepositRequest& request, ::bank::SimpleReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bank::UserSavingDepositRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UserSavingDeposit_, context, request, response);
}

void Greeter::Stub::experimental_async::UserSavingDeposit(::grpc::ClientContext* context, const ::bank::UserSavingDepositRequest* request, ::bank::SimpleReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bank::UserSavingDepositRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserSavingDeposit_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::UserSavingDeposit(::grpc::ClientContext* context, const ::bank::UserSavingDepositRequest* request, ::bank::SimpleReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserSavingDeposit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bank::SimpleReply>* Greeter::Stub::PrepareAsyncUserSavingDepositRaw(::grpc::ClientContext* context, const ::bank::UserSavingDepositRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bank::SimpleReply, ::bank::UserSavingDepositRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UserSavingDeposit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bank::SimpleReply>* Greeter::Stub::AsyncUserSavingDepositRaw(::grpc::ClientContext* context, const ::bank::UserSavingDepositRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUserSavingDepositRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::UserDemandWithdraw(::grpc::ClientContext* context, const ::bank::UserDemandRequest& request, ::bank::SimpleReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bank::UserDemandRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UserDemandWithdraw_, context, request, response);
}

void Greeter::Stub::experimental_async::UserDemandWithdraw(::grpc::ClientContext* context, const ::bank::UserDemandRequest* request, ::bank::SimpleReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bank::UserDemandRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserDemandWithdraw_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::UserDemandWithdraw(::grpc::ClientContext* context, const ::bank::UserDemandRequest* request, ::bank::SimpleReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserDemandWithdraw_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bank::SimpleReply>* Greeter::Stub::PrepareAsyncUserDemandWithdrawRaw(::grpc::ClientContext* context, const ::bank::UserDemandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bank::SimpleReply, ::bank::UserDemandRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UserDemandWithdraw_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bank::SimpleReply>* Greeter::Stub::AsyncUserDemandWithdrawRaw(::grpc::ClientContext* context, const ::bank::UserDemandRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUserDemandWithdrawRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::UserSavingWithdraw(::grpc::ClientContext* context, const ::bank::UserSavingWithdrawRequest& request, ::bank::SimpleReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bank::UserSavingWithdrawRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UserSavingWithdraw_, context, request, response);
}

void Greeter::Stub::experimental_async::UserSavingWithdraw(::grpc::ClientContext* context, const ::bank::UserSavingWithdrawRequest* request, ::bank::SimpleReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bank::UserSavingWithdrawRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserSavingWithdraw_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::UserSavingWithdraw(::grpc::ClientContext* context, const ::bank::UserSavingWithdrawRequest* request, ::bank::SimpleReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserSavingWithdraw_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bank::SimpleReply>* Greeter::Stub::PrepareAsyncUserSavingWithdrawRaw(::grpc::ClientContext* context, const ::bank::UserSavingWithdrawRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bank::SimpleReply, ::bank::UserSavingWithdrawRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UserSavingWithdraw_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bank::SimpleReply>* Greeter::Stub::AsyncUserSavingWithdrawRaw(::grpc::ClientContext* context, const ::bank::UserSavingWithdrawRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUserSavingWithdrawRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::UserTransfer(::grpc::ClientContext* context, const ::bank::UserTransferRequest& request, ::bank::SimpleReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bank::UserTransferRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UserTransfer_, context, request, response);
}

void Greeter::Stub::experimental_async::UserTransfer(::grpc::ClientContext* context, const ::bank::UserTransferRequest* request, ::bank::SimpleReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bank::UserTransferRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserTransfer_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::UserTransfer(::grpc::ClientContext* context, const ::bank::UserTransferRequest* request, ::bank::SimpleReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserTransfer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bank::SimpleReply>* Greeter::Stub::PrepareAsyncUserTransferRaw(::grpc::ClientContext* context, const ::bank::UserTransferRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bank::SimpleReply, ::bank::UserTransferRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UserTransfer_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bank::SimpleReply>* Greeter::Stub::AsyncUserTransferRaw(::grpc::ClientContext* context, const ::bank::UserTransferRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUserTransferRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::UserLoan(::grpc::ClientContext* context, const ::bank::UserDemandRequest& request, ::bank::SimpleReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bank::UserDemandRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UserLoan_, context, request, response);
}

void Greeter::Stub::experimental_async::UserLoan(::grpc::ClientContext* context, const ::bank::UserDemandRequest* request, ::bank::SimpleReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bank::UserDemandRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserLoan_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::UserLoan(::grpc::ClientContext* context, const ::bank::UserDemandRequest* request, ::bank::SimpleReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserLoan_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bank::SimpleReply>* Greeter::Stub::PrepareAsyncUserLoanRaw(::grpc::ClientContext* context, const ::bank::UserDemandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bank::SimpleReply, ::bank::UserDemandRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UserLoan_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bank::SimpleReply>* Greeter::Stub::AsyncUserLoanRaw(::grpc::ClientContext* context, const ::bank::UserDemandRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUserLoanRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::UserLoanPay(::grpc::ClientContext* context, const ::bank::UserLoanPayRequest& request, ::bank::SimpleReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bank::UserLoanPayRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UserLoanPay_, context, request, response);
}

void Greeter::Stub::experimental_async::UserLoanPay(::grpc::ClientContext* context, const ::bank::UserLoanPayRequest* request, ::bank::SimpleReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bank::UserLoanPayRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserLoanPay_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::UserLoanPay(::grpc::ClientContext* context, const ::bank::UserLoanPayRequest* request, ::bank::SimpleReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserLoanPay_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bank::SimpleReply>* Greeter::Stub::PrepareAsyncUserLoanPayRaw(::grpc::ClientContext* context, const ::bank::UserLoanPayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bank::SimpleReply, ::bank::UserLoanPayRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UserLoanPay_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bank::SimpleReply>* Greeter::Stub::AsyncUserLoanPayRaw(::grpc::ClientContext* context, const ::bank::UserLoanPayRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUserLoanPayRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::LockUser(::grpc::ClientContext* context, const ::bank::SimpleRequest& request, ::bank::SimpleReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bank::SimpleRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_LockUser_, context, request, response);
}

void Greeter::Stub::experimental_async::LockUser(::grpc::ClientContext* context, const ::bank::SimpleRequest* request, ::bank::SimpleReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bank::SimpleRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LockUser_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::LockUser(::grpc::ClientContext* context, const ::bank::SimpleRequest* request, ::bank::SimpleReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_LockUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bank::SimpleReply>* Greeter::Stub::PrepareAsyncLockUserRaw(::grpc::ClientContext* context, const ::bank::SimpleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bank::SimpleReply, ::bank::SimpleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_LockUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bank::SimpleReply>* Greeter::Stub::AsyncLockUserRaw(::grpc::ClientContext* context, const ::bank::SimpleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLockUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::UnlockUser(::grpc::ClientContext* context, const ::bank::SimpleRequest& request, ::bank::SimpleReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bank::SimpleRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UnlockUser_, context, request, response);
}

void Greeter::Stub::experimental_async::UnlockUser(::grpc::ClientContext* context, const ::bank::SimpleRequest* request, ::bank::SimpleReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bank::SimpleRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnlockUser_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::UnlockUser(::grpc::ClientContext* context, const ::bank::SimpleRequest* request, ::bank::SimpleReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UnlockUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bank::SimpleReply>* Greeter::Stub::PrepareAsyncUnlockUserRaw(::grpc::ClientContext* context, const ::bank::SimpleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bank::SimpleReply, ::bank::SimpleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UnlockUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bank::SimpleReply>* Greeter::Stub::AsyncUnlockUserRaw(::grpc::ClientContext* context, const ::bank::SimpleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnlockUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::AllAccountsBasicStatus(::grpc::ClientContext* context, const ::bank::EmptyRequest& request, ::bank::AllAccountsBasicStatusReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bank::EmptyRequest, ::bank::AllAccountsBasicStatusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AllAccountsBasicStatus_, context, request, response);
}

void Greeter::Stub::experimental_async::AllAccountsBasicStatus(::grpc::ClientContext* context, const ::bank::EmptyRequest* request, ::bank::AllAccountsBasicStatusReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bank::EmptyRequest, ::bank::AllAccountsBasicStatusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AllAccountsBasicStatus_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::AllAccountsBasicStatus(::grpc::ClientContext* context, const ::bank::EmptyRequest* request, ::bank::AllAccountsBasicStatusReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AllAccountsBasicStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bank::AllAccountsBasicStatusReply>* Greeter::Stub::PrepareAsyncAllAccountsBasicStatusRaw(::grpc::ClientContext* context, const ::bank::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bank::AllAccountsBasicStatusReply, ::bank::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AllAccountsBasicStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bank::AllAccountsBasicStatusReply>* Greeter::Stub::AsyncAllAccountsBasicStatusRaw(::grpc::ClientContext* context, const ::bank::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAllAccountsBasicStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::AllAccountsSavingDocument(::grpc::ClientContext* context, const ::bank::EmptyRequest& request, ::bank::AllAccountsSavingDocumentReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bank::EmptyRequest, ::bank::AllAccountsSavingDocumentReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AllAccountsSavingDocument_, context, request, response);
}

void Greeter::Stub::experimental_async::AllAccountsSavingDocument(::grpc::ClientContext* context, const ::bank::EmptyRequest* request, ::bank::AllAccountsSavingDocumentReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bank::EmptyRequest, ::bank::AllAccountsSavingDocumentReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AllAccountsSavingDocument_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::AllAccountsSavingDocument(::grpc::ClientContext* context, const ::bank::EmptyRequest* request, ::bank::AllAccountsSavingDocumentReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AllAccountsSavingDocument_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bank::AllAccountsSavingDocumentReply>* Greeter::Stub::PrepareAsyncAllAccountsSavingDocumentRaw(::grpc::ClientContext* context, const ::bank::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bank::AllAccountsSavingDocumentReply, ::bank::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AllAccountsSavingDocument_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bank::AllAccountsSavingDocumentReply>* Greeter::Stub::AsyncAllAccountsSavingDocumentRaw(::grpc::ClientContext* context, const ::bank::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAllAccountsSavingDocumentRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::ChangeManager(::grpc::ClientContext* context, const ::bank::ChangeManagerRequest& request, ::bank::SimpleReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bank::ChangeManagerRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ChangeManager_, context, request, response);
}

void Greeter::Stub::experimental_async::ChangeManager(::grpc::ClientContext* context, const ::bank::ChangeManagerRequest* request, ::bank::SimpleReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bank::ChangeManagerRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangeManager_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::ChangeManager(::grpc::ClientContext* context, const ::bank::ChangeManagerRequest* request, ::bank::SimpleReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ChangeManager_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bank::SimpleReply>* Greeter::Stub::PrepareAsyncChangeManagerRaw(::grpc::ClientContext* context, const ::bank::ChangeManagerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bank::SimpleReply, ::bank::ChangeManagerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ChangeManager_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bank::SimpleReply>* Greeter::Stub::AsyncChangeManagerRaw(::grpc::ClientContext* context, const ::bank::ChangeManagerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncChangeManagerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::Exit(::grpc::ClientContext* context, const ::bank::EmptyRequest& request, ::bank::EmptyReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bank::EmptyRequest, ::bank::EmptyReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Exit_, context, request, response);
}

void Greeter::Stub::experimental_async::Exit(::grpc::ClientContext* context, const ::bank::EmptyRequest* request, ::bank::EmptyReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bank::EmptyRequest, ::bank::EmptyReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Exit_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::Exit(::grpc::ClientContext* context, const ::bank::EmptyRequest* request, ::bank::EmptyReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Exit_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bank::EmptyReply>* Greeter::Stub::PrepareAsyncExitRaw(::grpc::ClientContext* context, const ::bank::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bank::EmptyReply, ::bank::EmptyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Exit_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bank::EmptyReply>* Greeter::Stub::AsyncExitRaw(::grpc::ClientContext* context, const ::bank::EmptyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExitRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Greeter::Stub::JudgeLocked(::grpc::ClientContext* context, const ::bank::SimpleRequest& request, ::bank::LockedReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::bank::SimpleRequest, ::bank::LockedReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_JudgeLocked_, context, request, response);
}

void Greeter::Stub::experimental_async::JudgeLocked(::grpc::ClientContext* context, const ::bank::SimpleRequest* request, ::bank::LockedReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::bank::SimpleRequest, ::bank::LockedReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JudgeLocked_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::JudgeLocked(::grpc::ClientContext* context, const ::bank::SimpleRequest* request, ::bank::LockedReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_JudgeLocked_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::bank::LockedReply>* Greeter::Stub::PrepareAsyncJudgeLockedRaw(::grpc::ClientContext* context, const ::bank::SimpleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::bank::LockedReply, ::bank::SimpleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_JudgeLocked_, context, request);
}

::grpc::ClientAsyncResponseReader< ::bank::LockedReply>* Greeter::Stub::AsyncJudgeLockedRaw(::grpc::ClientContext* context, const ::bank::SimpleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncJudgeLockedRaw(context, request, cq);
  result->StartCall();
  return result;
}

Greeter::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::bank::HelloRequest, ::bank::HelloReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bank::HelloRequest* req,
             ::bank::HelloReply* resp) {
               return service->SayHello(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::bank::CreateAccountRequest, ::bank::CreateAccountReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bank::CreateAccountRequest* req,
             ::bank::CreateAccountReply* resp) {
               return service->CreateAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::bank::SimpleRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bank::SimpleRequest* req,
             ::bank::SimpleReply* resp) {
               return service->CloseAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::bank::SimpleRequest, ::bank::ShowAccountReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bank::SimpleRequest* req,
             ::bank::ShowAccountReply* resp) {
               return service->ShowAccount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::bank::LoginRequest, ::bank::LoginReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bank::LoginRequest* req,
             ::bank::LoginReply* resp) {
               return service->UserLogin(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::bank::LoginRequest, ::bank::LoginReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bank::LoginRequest* req,
             ::bank::LoginReply* resp) {
               return service->ManagerLogin(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::bank::ChangePasswordRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bank::ChangePasswordRequest* req,
             ::bank::SimpleReply* resp) {
               return service->ChangePassword(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::bank::UserDemandRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bank::UserDemandRequest* req,
             ::bank::SimpleReply* resp) {
               return service->UserDemandDeposit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::bank::UserSavingDepositRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bank::UserSavingDepositRequest* req,
             ::bank::SimpleReply* resp) {
               return service->UserSavingDeposit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::bank::UserDemandRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bank::UserDemandRequest* req,
             ::bank::SimpleReply* resp) {
               return service->UserDemandWithdraw(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::bank::UserSavingWithdrawRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bank::UserSavingWithdrawRequest* req,
             ::bank::SimpleReply* resp) {
               return service->UserSavingWithdraw(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::bank::UserTransferRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bank::UserTransferRequest* req,
             ::bank::SimpleReply* resp) {
               return service->UserTransfer(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::bank::UserDemandRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bank::UserDemandRequest* req,
             ::bank::SimpleReply* resp) {
               return service->UserLoan(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::bank::UserLoanPayRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bank::UserLoanPayRequest* req,
             ::bank::SimpleReply* resp) {
               return service->UserLoanPay(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::bank::SimpleRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bank::SimpleRequest* req,
             ::bank::SimpleReply* resp) {
               return service->LockUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::bank::SimpleRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bank::SimpleRequest* req,
             ::bank::SimpleReply* resp) {
               return service->UnlockUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::bank::EmptyRequest, ::bank::AllAccountsBasicStatusReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bank::EmptyRequest* req,
             ::bank::AllAccountsBasicStatusReply* resp) {
               return service->AllAccountsBasicStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::bank::EmptyRequest, ::bank::AllAccountsSavingDocumentReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bank::EmptyRequest* req,
             ::bank::AllAccountsSavingDocumentReply* resp) {
               return service->AllAccountsSavingDocument(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::bank::ChangeManagerRequest, ::bank::SimpleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bank::ChangeManagerRequest* req,
             ::bank::SimpleReply* resp) {
               return service->ChangeManager(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::bank::EmptyRequest, ::bank::EmptyReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bank::EmptyRequest* req,
             ::bank::EmptyReply* resp) {
               return service->Exit(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::bank::SimpleRequest, ::bank::LockedReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Greeter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::bank::SimpleRequest* req,
             ::bank::LockedReply* resp) {
               return service->JudgeLocked(ctx, req, resp);
             }, this)));
}

Greeter::Service::~Service() {
}

::grpc::Status Greeter::Service::SayHello(::grpc::ServerContext* context, const ::bank::HelloRequest* request, ::bank::HelloReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::CreateAccount(::grpc::ServerContext* context, const ::bank::CreateAccountRequest* request, ::bank::CreateAccountReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::CloseAccount(::grpc::ServerContext* context, const ::bank::SimpleRequest* request, ::bank::SimpleReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::ShowAccount(::grpc::ServerContext* context, const ::bank::SimpleRequest* request, ::bank::ShowAccountReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::UserLogin(::grpc::ServerContext* context, const ::bank::LoginRequest* request, ::bank::LoginReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::ManagerLogin(::grpc::ServerContext* context, const ::bank::LoginRequest* request, ::bank::LoginReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::ChangePassword(::grpc::ServerContext* context, const ::bank::ChangePasswordRequest* request, ::bank::SimpleReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::UserDemandDeposit(::grpc::ServerContext* context, const ::bank::UserDemandRequest* request, ::bank::SimpleReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::UserSavingDeposit(::grpc::ServerContext* context, const ::bank::UserSavingDepositRequest* request, ::bank::SimpleReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::UserDemandWithdraw(::grpc::ServerContext* context, const ::bank::UserDemandRequest* request, ::bank::SimpleReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::UserSavingWithdraw(::grpc::ServerContext* context, const ::bank::UserSavingWithdrawRequest* request, ::bank::SimpleReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::UserTransfer(::grpc::ServerContext* context, const ::bank::UserTransferRequest* request, ::bank::SimpleReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::UserLoan(::grpc::ServerContext* context, const ::bank::UserDemandRequest* request, ::bank::SimpleReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::UserLoanPay(::grpc::ServerContext* context, const ::bank::UserLoanPayRequest* request, ::bank::SimpleReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::LockUser(::grpc::ServerContext* context, const ::bank::SimpleRequest* request, ::bank::SimpleReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::UnlockUser(::grpc::ServerContext* context, const ::bank::SimpleRequest* request, ::bank::SimpleReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::AllAccountsBasicStatus(::grpc::ServerContext* context, const ::bank::EmptyRequest* request, ::bank::AllAccountsBasicStatusReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::AllAccountsSavingDocument(::grpc::ServerContext* context, const ::bank::EmptyRequest* request, ::bank::AllAccountsSavingDocumentReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::ChangeManager(::grpc::ServerContext* context, const ::bank::ChangeManagerRequest* request, ::bank::SimpleReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Exit(::grpc::ServerContext* context, const ::bank::EmptyRequest* request, ::bank::EmptyReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::JudgeLocked(::grpc::ServerContext* context, const ::bank::SimpleRequest* request, ::bank::LockedReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bank

